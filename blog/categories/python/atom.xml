<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | skien.cc]]></title>
  <link href="http://skien.cc/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://skien.cc/"/>
  <updated>2014-02-06T00:04:20-05:00</updated>
  <id>http://skien.cc/</id>
  <author>
    <name><![CDATA[Erik Taubeneck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Unique Constraints After the Fact in SQLAlchemy]]></title>
    <link href="http://skien.cc/blog/2014/01/31/adding-unique-contraints-after-the-fact-in-sqlalchemy/"/>
    <updated>2014-01-31T16:40:00-05:00</updated>
    <id>http://skien.cc/blog/2014/01/31/adding-unique-contraints-after-the-fact-in-sqlalchemy</id>
    <content type="html"><![CDATA[<p>In a <a href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/">previous post</a>, I wrote about writing a <code>get_one_or_create()</code> function for SQLAlchemy. Turns out that I had inadvertently created a race condition while horizontally scaling on Heroku. That post explains, in detail, the solution I came up with for moving forward, however I still had duplicate objects in my database that needed to remove. Since I&rsquo;m on Heroku, I&rsquo;m using Postgres (although I&rsquo;m highly opinionated towards using Postgres often), so some of this may be Postgres specific, and I will do my best to note when that&rsquo;s the case.</p>

<p>I&rsquo;ll use the same example models that I used in my previous post. We had <code>Game</code> and <code>GameBeat</code> models:</p>

<!-- more -->


<p>``` python
class Game(db.Model):</p>

<pre><code>__tablename__  = 'games'
id = db.Column(db.Integer, primary_key=True)
provider_game_id = db.Column(db.String(255))
provider_game_name = db.Column(db.String(255))
provider_game_category = db.Column(db.String(255))
</code></pre>

<p>class GameBeat(db.Model):</p>

<pre><code>__tablename__ = 'game_beats'
id = db.Column(db.Integer, primary_key=True)
game_id = db.Column(db.Integer, db.ForeignKey('games.id'))
game = db.relationship("Game",
                       backref="beats",
                       lazy="joined",
                       innerjoin=True)
user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
user = db.relationship("User",
                       backref="game_beats",
                       lazy="joined",
                       innerjoin=True)
beat_at = db.Column(db.DateTime())
</code></pre>

<p>```</p>

<p>but had accidentally created multiple <code>Game</code> objects with the same <code>provider_game_id</code> attribute. At the very least, we would rather have the class definition and database representation put a unique constraint on this attribute so that if we ever attempted to create such a duplicate <code>Game</code> object, we&rsquo;ll end up raising a <code>IntegrityError</code> and the duplicate won&rsquo;t actually get added to the datastore. (Again, a <a href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/">previous post</a> discusses how to handle this).</p>

<p>The class definition updates to:</p>

<p>```
class Game(db.Model):</p>

<pre><code>__tablename__  = 'games'
id = db.Column(db.Integer, primary_key=True)
provider_game_id = db.Column(db.String(255), unique=True)
provider_game_name = db.Column(db.String(255))
provider_game_category = db.Column(db.String(255))
</code></pre>

<p>```</p>

<p>We still, however need to make the update to our datastore (Postgres, in our case), along with finding and eliminating the duplicates we introduced into the system.</p>

<h2>Using <code>alembic</code> to update the datastore</h2>

<p>If you&rsquo;re not using <a href="http://alembic.readthedocs.org/en/latest/"><code>alembic</code></a> with <code>SQLAlchemy</code>, you&rsquo;re doing it wrong. OK &ndash; that&rsquo;s a bit harsh (and if you&rsquo;re doing it some other way, let me know!), but if you ever plan to change your data model, you&rsquo;ll need to change your datastore along with it, and <code>alembic</code> is an excellent tool to help you along. It&rsquo;s version control for your database schema; think Git for your class models.</p>

<p><code>alembic</code> provides the useful <code>autogenerate</code> option that can be used like so:</p>

<p><code>
$ alembic --autogenerate -m "add unique constraint to Game.provider_game_id"
</code></p>

<p>(Some <a href="http://alembic.readthedocs.org/en/latest/tutorial.html#auto-generating-migrations">setup</a> is required to get this option to work.) You should now have a new file in your <code>alembic/versions</code> directory with the name something like <code>10f2a956bad5_add_unique_constrain.py</code>. (Your hash at the beginning is going to almost certainly be different.) If you look at the file, you&rsquo;ll notice that it is mostly empty. Unfortunately, <code>alembic</code> isn&rsquo;t able to identify newly added unique constraints automatically, so we will have to fill it in.</p>

<p>I found the <a href="http://alembic.readthedocs.org/en/rel_0_1/ops.html#alembic.op.create_unique_constraint">documentation</a> on adding a unique constraint a bit confusing at first. The function we want to use is <code>op.create_unique_constraint()</code>, which takes arguments <code>name</code>, <code>source</code>, and <code>local_cols</code>. At first, I thought <code>name</code> was the name of the column which I wanted to make unique, however it&rsquo;s actually the name of the constraint. In my setup (with Postgres), I was able to let <code>name = None</code> and have SQLAlchemy and Postgres sort it out. The <code>source</code> is just a string of the name of the table, and <code>local_cols</code> is where we specify what we want to make unique. The somewhat tricky part here is that we can make a constraint where <code>(col1,col2)</code> needs to be unique (not individually unique, but the combination of the two), so this parameter takes a list. In our case, the list will only have a single member, <code>provider_game_id</code>. Within the <code>upgrade</code> function in our migration file, we can add:</p>

<p>```
def upgrade():</p>

<pre><code>op.create_unique_constraint(None,
                            "games",
                            ["provider_game_id"])
</code></pre>

<p><code>``
and under the</code>downgrade` function, we can add:</p>

<p>```
def downgrade():</p>

<pre><code>op.drop_contraint("provider_game_id",
                  "games",
                   "unique")
</code></pre>

<p>```</p>

<p>If there are any existing duplicates and we run this, however, we are going to get an <code>IntegrityError</code>. So it&rsquo;s time to seek and destroy.</p>

<h2>Finding Duplicate Entries</h2>

<p>As we&rsquo;re debugging the situation, one of the first things we&rsquo;ll want see how many duplicates we have of our object along the <code>provider_game_id</code>. I wrote this function do do just that:</p>

<p>```
from sqlalchemy import func</p>

<p>def n_dups(session, cls, attr):</p>

<pre><code>return session.query(getattr(cls,attr)).group_by(getattr(cls,attr)).\
        having(func.count(getattr(cls,attr)) &gt; 1).count()
</code></pre>

<p>```</p>

<p>Running this, we&rsquo;ll use <code>n_dups(Game, 'provider_game_id')</code> and likely see something more than zero. All this tells us, however, is how many dups we have along that attribute. We now need to iterate though each duplicated <code>provider_game_id</code> and collect all the objects with said <code>provider_game_id</code>. Getting the duplicated <code>provider_game_ids</code> is similar to above:</p>

<p>```
def get_duplicated_attrs(session, cls, attr):</p>

<pre><code>return session.query(getattr(cls,attr)).group_by(getattr(cls,attr)).\
        having(func.count(getattr(cls,attr)) &gt; 1).all()
</code></pre>

<p>```</p>

<p>So now we can get the duplicated objects:</p>

<p>```
def get_duplicated_objs(session, cls, attr, attr_value, order_by_attr):</p>

<pre><code>return session.query(cls).filter(getattr(cls,attr) == attr_value)).\
        order_by(order_by_attr).all()
</code></pre>

<p>```</p>

<p>The <code>order_by_attr</code> is going to come in handy in the next decision when we decide which duplicated objects get the axe.</p>

<h2>Eliminating Duplicate Entries</h2>

<p>While there are a few caveats explained below, our alembic migration file is a good place to identify and eliminate any duplicates, for a few reasons:</p>

<ol>
<li>If our database has duplicates on a row we are asking it to add a unique constraint to, we will get an <code>IntegrityError</code>, so we are required to do this before the command in the migration that adds the constraint is applied. Adding it here means that we always know it will be run before we try to migrate.</li>
<li>I generally don&rsquo;t like to clutter my applications with scripts that are (ideally) only run once, however I also do not want to run something like this in a REPL because you then loose the history of what was run. Adding it here means that we&rsquo;ll not only retain the history, but the exact point in which it was run.</li>
<li>It&rsquo;s already built into my build process (which is just a nice perk for me, but running <code>alembic</code> in your built process helps you to never forget running your migrations.)</li>
</ol>


<p>When we delete the duplicate entries in our database, we have to decide on a rule for which one&rsquo;s to delete, and which <em>one</em> to keep. (You could also delete all, and then recreate them with your new protections against creating duplicates.) I decided to keep the oldest entry (not for any particularly good reason, except that I had originally created my objects with <code>created_at</code> attributes. Our example doesn&rsquo;t have these, so I&rsquo;ll use <code>id</code> which is effectively the same thing assuming the <code>id</code> is auto incremented.) Inside my alembic migration file, I added the following function</p>

<p>```
from sqlalchemy import func</p>

<p>def remove_duplicates(session, cls, attr):</p>

<pre><code>duplicates = session.query(getattr(cls,attr)).group_by(getattr(cls,attr)).
              having(func.count(getattr(cls, attr)) &gt; 1).all()
n_dups = len(duplicates)
print '{}.{}: {} duplicates found'.format(cls.__name__, attr, n_dups)
for duplicate in duplicates:
    objs = session.query(cls).
            filter(getattr(cls,attr) == getattr(duplicate, attr)).
            order_by('id').all()
    map(session.delete, objs[1:])
session.commit()
print '{}.{}: {} duplicates removed'.format(cls.__name__, attr, n_dups)
</code></pre>

<p>```</p>

<p>Before we can call this function, however, there are a few caveats (which I just ran into the hard way.) First, we will need to import the <code>db</code> object and the <code>Game</code> object. Typically in Python, we only import things at the top of the file, but in order for things like <code>alembic history</code> to work correctly, we need to import these within the <code>upgrade()</code> function. That way, they will only be loaded with a migration is being run, and not when the migration file is inspected for things like the version number by other tools.</p>

<p>Second, if you are doing a &ldquo;dry run&rdquo; <code>alembic upgrade head</code> (i.e. from a newly created DB with no schema), alembic works through all the migration files and issues one SQL statement at the end of the process. This is a problem if you attempt to query on the <code>Game</code> object, who&rsquo;s table doesn&rsquo;t exist yet. We can safely assume, however, that if the table doesn&rsquo;t exist yet, it doesn&rsquo;t have any duplicates. Luckily, SQLAlchemy has an <code>Inspector</code> object that allows reflection into the existing tables from and engine, and using</p>

<p><code>
inspector = Inspector.from_engine(db.engine)
existing_tables = inspector.get_table_names()
</code>
will do the the trick. Now, within the <code>upgrade()</code> function we call our <code>remove_duplicates</code> function for the objects and their attributes with duplicates like so:</p>

<p>```
from sqlalchemy.engine.reflection import Inspector</p>

<p>def upgrade():</p>

<pre><code>from app import db
from app.models import Game

inspector = Inspector.from_engine(db.engine)
existing_tables = inspector.get_table_names()

if Game.__tablename__ in existing_tables:
    remove_duplicates(db.session, Game, 'provider_game_id')
op.create_unique_constraint(None,
                            "games",
                            ["provider_game_id"])
</code></pre>

<p>```</p>

<p>and our <code>downgrade</code> function stays the same as above:</p>

<p>```
def downgrade():</p>

<pre><code>op.drop_contraint("provider_game_id",
                  "games",
                   "unique")
</code></pre>

<p>```</p>

<p>(Note: the import statements that happen outside of the functions can just be placed at the top of the migration file. They shouldn&rsquo;t cause any conflicts.)</p>

<p>Woo! That&rsquo;s it. There are certainly a few <em>hacks</em> in here, so as usual, through some feedback in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy and Race Conditions: Implementing `get_one_or_create()`]]></title>
    <link href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/"/>
    <updated>2014-01-15T13:57:00-05:00</updated>
    <id>http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing</id>
    <content type="html"><![CDATA[<p>Note: Examples here are built with respect to <a href="http://pythonhosted.org/Flask-SQLAlchemy/">Flask SQLAlchemy</a>, and while some notation may match that convention, the concepts should apply to use of <a href="http://www.sqlalchemy.org/">SQLAlchemy</a> in general.</p>

<h2>Motivation</h2>

<p>Suppose we have a <a href="http://flask.pocoo.org/">Flask</a> app that interacts with an API on a site that hosts webgames. Our users have OAuth'ed our application into the API so we can see their activity, and we want to track which games they have beat. (We&rsquo;ll assume that users only beat a game once or more generally we are only concerned with the first time they beat it.) We create the <code>Game</code> and <code>GameBeat</code> models like so:</p>

<!-- more -->


<p>``` python
class Game(db.Model):</p>

<pre><code>__tablename__  = 'games'
id = db.Column(db.Integer, primary_key=True)
provider_game_id = db.Column(db.String(255))
provider_game_name = db.Column(db.String(255))
provider_game_category = db.Column(db.String(255))
</code></pre>

<p>class GameBeat(db.Model):</p>

<pre><code>__tablename__ = 'game_beats'
id = db.Column(db.Integer, primary_key=True)
game_id = db.Column(db.Integer, db.ForeignKey('games.id'))
game = db.relationship("Game",
                       backref="beats",
                       lazy="joined",
                       innerjoin=True)
user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
user = db.relationship("User",
                       backref="game_beats",
                       lazy="joined",
                       innerjoin=True)
beat_at = db.Column(db.DateTime())
</code></pre>

<p>```</p>

<p>A few notes on these models. This assumes that each <code>Game</code> object coming from the API has an <code>id</code>, <code>name</code>, and <code>category</code> attribute, and anytime a game is beat by a user, you can get the datetime of when it was beat. One other convention is using <code>db.String(255)</code> for <code>provider_game_id</code> (rather than <code>db.Integer</code>). You will often see this with APIs where the <code>ids</code> can be very large integers (think of the number of Tweets on Twitter for example), and while Python handles big ints well, unless you want to use big ints for actually doing math, a string will be much more efficient (and you&rsquo;ll be less likely to have an issue with your backend datastore).</p>

<h2>Implementing a basic <code>get_one_or_create()</code></h2>

<p>NOTE: The original implementation I used was first inspired from <a href="http://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create">this Stack Overflow</a> question.</p>

<p>If you&rsquo;ve ever played around with <a href="https://www.djangoproject.com/">Django</a>, you&rsquo;ve probably seen the <code>get_or_create()</code> function, but if not the concept is straight forward. First look for an object given a set of constraints, and if it doesn&rsquo;t exist, create it. The usefulness here is pretty obvious in our above example. Without it, given a list of <code>game_beats</code> from the API and a <code>user</code>, we&rsquo;d have to do something like</p>

<p>```
for game_beat_data in game_beat_data_list:</p>

<pre><code>if db.session.query(Game).filter(Game.provider_game_id == game_beat_data['game']['game_id']).count() == 0:
    game = Game(provider_game_id = game_beat_data['game']['game_id'],
                provider_game_name = game_beat_data['game']['game_name'],
                provider_game_category = game_beat_data['game']['game_category']
                )
else:
    game = db.session.query(Game).filter(Game.provider_game_id == game_beat_data['game']['game_id']).one()
if db.session.query(GameBeat).filter(GameBeat.game == game).filter(GameBeat.user == user).count() == 0:
    game_beat = GameBeat(game = game,
                         user = user,
                         beat_at = game_beat_data['beat_at']
                         )
else:
    game_beat = db.session.query(GameBeat).filter(GameBeat.game == game).filter(GameBeat.user == user).one()
db.session.add(game_beat)
</code></pre>

<p>db.session.commit()
```</p>

<p>This is quite verbose, and the logic is repeated twice, so it seems like a perfect place to write a function. Here&rsquo;s a first attempt, (and we&rsquo;ll build from here):</p>

<p>```
from sqlalchemy.orm.exc import NoResultFound</p>

<p>def get_one_or_create(session,</p>

<pre><code>                  model,
                  **kwargs):
</code></pre>

<p>   try:</p>

<pre><code>   return session.query(model).filter_by(**kwargs).one()
</code></pre>

<p>   except NoResultFound:</p>

<pre><code>   return model(**kwargs)                 
</code></pre>

<p>```</p>

<p>There are a couple small differences here. Most obvious is the change to a <code>try/except</code> block rather than getting the <code>count()</code> explicitly. The advantage here is that if the object exists, we only have to make one call to the datastore. The other is the use of <code>filter_by()</code>, which is just a version of <code>filter</code> that uses keyword arguments.</p>

<p>Using this function, our above example now becomes:</p>

<p>```
for game_beat_data in game_beat_data_list:</p>

<pre><code>game = get_one_or_create(
    db.session,
    Game,
    provider_game_id = game_beat_data['game']['game_id']
)
game_beat = get_one_or_create(
    db.session,
    GameBeat,
    game = game,
    user = user,
    beat_at = game_beat_data['beat_at']
)
db.session.add(game_beat)
</code></pre>

<p>db.session.commit()
```</p>

<p>Now, since I&rsquo;ve broken the inputs into our function onto multiple lines, we&rsquo;ve only dropped from 17 lines to 15, however I&rsquo;d still argue this is a HUGE decrease in complexity. We can now actually fit in under 80 characters without having to use <code>\</code> for newlines, but more generally, it&rsquo;s simply more readable.</p>

<h2>A small modification</h2>

<p>I&rsquo;m not going to motivate this, but sometimes you&rsquo;ll want to know if the object you&rsquo;re getting back was newly created or pulled from the datastore, so we can easily return a <code>bool</code> as well by updating our function to</p>

<p>```
from sqlalchemy.orm.exc import NoResultFound</p>

<p>def get_one_or_create(session,</p>

<pre><code>                  model,
                  **kwargs):
</code></pre>

<p>   try:</p>

<pre><code>   return session.query(model).filter_by(**kwargs).one(), True
</code></pre>

<p>   except NoResultFound:</p>

<pre><code>   return model(**kwargs), False
</code></pre>

<p>```</p>

<p>and now we just have to remember that when we use it, to unpack into two variables</p>

<p><code>
obj, exists = get_one_or_create( … )
</code></p>

<p>or else we will end up with a <code>tuple</code> where we expected <code>obj</code>.</p>

<h2>The <code>@classmethod</code> decorator</h2>

<p>One of my favorite Python patterns is using the <code>@classmethod</code> decorator with a creator function. In our above example, suppose we want to be able to create a <code>Game</code> object, but we may or may not have the <code>provider_game_name</code> and <code>provider_game_category</code> immediately available. We can update our model definition (assuming we have a <code>get_game_data_from_api</code> function from our API):</p>

<p>```
class Game(db.Model):</p>

<pre><code>__tablename__  = 'games'
id = db.Column(db.Integer, primary_key=True)
provider_game_id = db.Column(db.String(255))
provider_game_name = db.Column(db.String(255))
provider_game_category = db.Column(db.String(255))

@classmethod
create_from_provider_game_id(cls, provider_game_id,**kwargs):
    provider_game_name = kwargs.get('provider_game_name', None)
    provider_game_category = kwargs.get('provider_game_category', None)
    if not provider_game_name and provider_game_category:
        game_data = get_game_data_from_api(provider_game_id)
        provider_game_name = game_data['provider_game_name']
        provider_game_category = game_data['provider_game_category']
    return cls(provider_game_id = provider_game_id,
               provider_game_name = provider_game_name,
               provider_game_category = provider_game_category)
</code></pre>

<p>```</p>

<p>now if we do</p>

<p><code>
game = Game.create_from_provider_game_id(provider_game_id = game_beat_data['game']['id'])
</code></p>

<p>we get a new <code>Game</code> object which will ping the API in order to get the other data to fill it out. But, if we already have the data (or we <em>maybe</em> have the data), we can do the following:</p>

<p>```
game = Game.create_from_provider_game_id(</p>

<pre><code>       provider_game_id = game_beat_data['game']['id'],
       provider_game_name = game_beat_data['game'].get('name', None),
       provider_game_category = game_beat_data['game'].get('category', None)
   )
</code></pre>

<p>```</p>

<p>I like to think of writing code like this as being <em>fault tolerant</em>. If you&rsquo;ve played with external APIs before, their behavior can often change slightly. Moreover, writing code like this gives me a consistent pattern, so if in one case I have a collection of <code>dict</code>s from an API with all the relevant game data, and in another case I only have a collection of the <code>provider_game_id</code>s, I can use the same pattern. If I have all the data, I can save myself <code>n</code> calls to the API, and if I&rsquo;m not sure (or maybe the API is inconsistent &ndash; yes it happens), it will still work.</p>

<h2>Updating <code>get_one_or_create</code></h2>

<p>It&rsquo;s quickly obvious that our current implementation of <code>get_one_or_create()</code> won&rsquo;t handle such pattern for creating model instances. But this is programming, we are the creators. Let&rsquo;s update our function:</p>

<p>```
from sqlalchemy.orm.exc import NoResultFound</p>

<p>def get_one_or_create(session,</p>

<pre><code>                  model,
                  create_method='',
                  create_method_kwargs={},
                  **kwargs):
try:
    return session.query(model).filter_by(**kwargs).one(), True
except NoResultFound:
    kwargs.update(create_method_kwargs)
    return getattr(model, create_method, model)(**kwargs), False
</code></pre>

<p>```</p>

<p>The reason for adding this <code>create_method_kwargs</code> <code>dict</code> is fairly straight forward: consider a case where we need to hand a <code>user</code> to our API method <code>get_game_data_from_api</code>, but we don&rsquo;t store a <code>user</code> on the <code>Game</code> object and certainly don&rsquo;t want to include it in the <code>filter_by</code>.</p>

<p>At this point, we have a pretty robust <code>get_one_or_create()</code> function that worked quite well for me, until it didn&rsquo;t.</p>

<h2>An Unexpected Exception</h2>

<p>By using my newly minted <code>get_one_or_create()</code> wherever I create objects, you can imagine my surprise when <code>MultipleResultsFound</code> exceptions starting being raised when trying to <code>get_one_or_create()</code> a <code>Game</code>. I scoured my code for any place that I created a <code>Game</code>; luckily <code>grep</code> makes this easy. Nothing. I expanded my test so that I was mocking a scan for 100 users. Nothing. Maybe there was a unicode issue where the <em>get</em> part was trying to match to a unicode to string (and failing) but the <em>create</em> part was then creating the attribute as a string. A new test quickly disproved this. Nothing.</p>

<p>I was lost. I was writing tests <em>hoping</em> that they would fail just so I could figure out what was going wrong. And it was 4am. I <em>hate</em> going to sleep at a point like this. (I use <em>sleep</em> loosely here &ndash; I generally don&rsquo;t sleep well and lay awake trying to figure out how to fix my problem.) I&rsquo;m not sure if it was that night or the next morning (or even when you draw the line going to bed at 4am for that matter…), but I eventually realized why I was getting duplicate objects in my datastore.</p>

<p>During the time between the <em>get</em> call when the object doesn&rsquo;t exist and the call to <code>db.session.commit()</code>, the object was created somewhere else. I was using Celery to batch the update and it was a brand new scan, so a lot of stuff was being created. Since the <code>db.session.commit()</code> comes at the end of the loop, there can actually be a fair amount of time between these calls. But even if a <code>db.session.commit()</code> happened sooner, we want to be <em>sure</em> that another matching object didn&rsquo;t get created between the <em>get</em> and <em>create</em> parts of a function.</p>

<h2>Celery &ldquo;async&rdquo; and Race Conditions</h2>

<h3><code>@celery.task()</code></h3>

<p>I use quotes here in the way I&rsquo;d use air quotes if we were talking: the <a href="http://www.celeryproject.org/">Celery</a> async task model isn&rsquo;t true async in the way that <a href="http://twistedmatrix.com/trac/">Twisted</a> or <a href="http://docs.python.org/3.4/library/asyncio.html"><code>asyncio</code></a> is. Instead it uses an external messaging system (I use <a href="http://redis.io/">Redis</a> &ndash; mostly due to the price on <a href="https://www.heroku.com/">Heroku</a>). Functions and their inputs (remember that in Python, functions, like everything else, are objects) are JSONified, stored in the message system, and then deJSONified and executed in a completely separate process.</p>

<p>It does become more complicated if you care about the result of a function call, but often you call functions only for their side effects. Sometimes you&rsquo;ll want to kick off a job of a few such function calls as a result of a web request. If the job takes awhile (anything more than a second) you certainly do not wish to wait (or can&rsquo;t, eventually you&rsquo;ll timeout) for that function to complete before responding. Celery makes this pattern straight forward, if not easy, to accomplish with a synchronous web framework like Flask.</p>

<p>Celery also makes it really easy to horizontally scale a batch of jobs. Suppose we want to update the <code>GameBeat</code>s for all our users. We could create a celery task like so</p>

<p>```
from app import celery, db
from app.models import User
from app.provider_apis import get_provider_api</p>

<p>@celery.task()
def update_game_beats_for_user_id(user_id):</p>

<pre><code>user = db.session.query(User).get(user_id)
api = get_provider_api(user)
game_beat_data_list = api.get_game_beats()
for game_beat_data in game_beat_data_list:
    …
</code></pre>

<p>```</p>

<p>where the <code>…</code> completes the pattern above showing the usage of <code>get_one_or_create()</code>. We can now create a task for each user by running</p>

<p>```
from app.tasks import update_game_beats_for_user_id
from app import db
from app.models import User</p>

<p>users = db.session.query(User).query.all()
for user in users</p>

<pre><code>update_game_beats_for_user_id.delay(user.id)
</code></pre>

<p>```</p>

<p>This makes it possible to spin up a number of Celery workers (Heroku for this is as easy as scrolling a slider on a web interface and clicking &ldquo;Apply&rdquo;, or a single short bash command) and get all these tasks done quickly.</p>

<h3>Race Conditions</h3>

<p>Whenever you have multiple concurrent processes interacting with an external service, you have to be concerned about race conditions, e.g. from the perspective of any process, the state of that external service may change at anytime without any interaction from that process. Luckily, Celery is designed to handle this and maps jobs out in a way that no two processes will receive the same message.</p>

<p>SQLAlchemy even has some protection against this, although I&rsquo;m not sure exactly how it&rsquo;s implemented. I do know that if I have an <code>ipython</code> shell open with a transition pending, a query in another process will stall. This goes out the window, however, when we&rsquo;re working with Celery workers on separate Heroku instances or even separate web instances. So we certainly want to protect against this type of thing in production.</p>

<p>In our example, since we plan to look up <code>Game</code> objects by <code>provider_game_id</code> and expect only one instance, we should have defined that column with a unique constraint like so:</p>

<p>```
class Game(db.Model):</p>

<pre><code>…
provider_game_id = db.Column(db.String(255), unique=True)
…
</code></pre>

<p>```</p>

<p>Luckily we can make this change after the fact (which I won&rsquo;t show here, but I plan to write about next). Had we done this originally, we would never have gotten the <code>MultipleResultsFound</code> exception, but instead would have gotten a <code>IntegrityError</code> when trying to execute <code>db.session.commit()</code> of an transition that would <em>create</em> our duplicated item. This is desirable since the exception comes <em>before</em> the duplicate is introduced into the datastore. However, it would be best for our <code>get_one_or_create</code> function to take care of this as well.</p>

<h2>A &ldquo;final&rdquo; <code>get_one_or_create()</code></h2>

<p>Again, think air quotes. As a developer, I never think or anything as final. Or maybe I always think an implementation is final, and I&rsquo;m always wrong. Regardless, of the concerns I&rsquo;ve reached so far, here is a &ldquo;final&rdquo; version:</p>

<p>```
def get_one_or_create(session,</p>

<pre><code>                  model,
                  create_method='',
                  create_method_kwargs={},
                  **kwargs):
try:
    return session.query(model).filter_by(**kwargs).one(), True
except NoResultFound:
    kwargs.update(create_method_kwargs)
    created = getattr(model, create_method, model)(**kwargs)
    try:
        session.add(created)
        session.commit()
        return created, False
    except IntegrityError:
        session.rollback()
        return session.query(model).filter_by(**kwargs).one(), True
</code></pre>

<p>```</p>

<p>Here&rsquo;s what&rsquo;s happening. It tries to find the right object, and if it finds it, it returns it. If not, it creates it, adds it to the session, and attempts to commit. In the mean time, if another process has created and committed an object with the same details we filtered by, an <code>IntegrityError</code> raises and is caught. This means we should be able to get the newly created object, so we now get that and return it.</p>

<p>You&rsquo;ll notice one major difference from our earlier versions: <code>session.commit()</code> is now in the function. I&rsquo;ve avoided doing this thus far due to the recommended usage in the SQLAlchemy documentations on <a href="http://docs.sqlalchemy.org/en/latest/orm/session.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it">sessions</a>:</p>

<blockquote><p>As a general rule, keep the lifecycle of the session separate and external from functions and objects that access and/or manipulate database data.</p></blockquote>

<p>The reason we must add this into our function call here, is that if we do the <code>db.session.commit()</code> after making several calls to <code>get_one_or_create()</code> and the <code>IntegrityError</code> was raised, we&rsquo;d have no idea which created object caused it and we&rsquo;d have to start the entire transaction over (and we&rsquo;d have to write logic outside the function to handle all this). Since our <code>get_one_or_create()</code> function is written generally for any model and unique keywords, rather than specific logic tied to a specific model, I don&rsquo;t think it seriously conflicts with the SQLAlchemy philosophy.</p>

<h2>Final Thoughts</h2>

<p>Race conditions and asynchronous programing are difficult, especially when working in a framework that doesn&rsquo;t force you to work or think that way. Flask and certainly Flask-SQLAlchemy aren&rsquo;t extremely well suited to handle this, but also with Flask&rsquo;s synchronous handling of requests, it doesn&rsquo;t become a issue often. When scaling, however, you being to increase the probability of such occurrences happen.</p>

<p>How does this work in Tornado or Twisted? My friend and former colleague <a href="https://github.com/bmuller">Brian Muller</a> wrote <a href="http://findingscience.com/twistar/">Twistar</a>, a Python implementation of a nonblocking active record pattern interface to relational databases (built to use with Twisted). It&rsquo;s been on my list of packages to read. To some extent, building a webapp in Twisted has a high upfront cost, but it also has this added value of forcing you to think deeper and see these problems before you have a few hundred duplicated entries in your database.</p>

<p>I love Flask and the community, and it has all been very good to me as being quite new to web app development, but part of me wants to start playing around with the JS template systems like <a href="http://facebook.github.io/react/">React</a>. This also makes sense as you start getting into the realm of iOS and Android apps. At some point you have many different &ldquo;front ends&rdquo; and your backend is really just serving up data to fill it. At that point, a centralized template system like Jinja makes less sense, and moving from Flask to Twisted makes more sense.</p>
]]></content>
  </entry>
  
</feed>
