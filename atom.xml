<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[skien.cc]]></title>
  <link href="http://skien.cc/atom.xml" rel="self"/>
  <link href="http://skien.cc/"/>
  <updated>2014-02-06T00:12:32-05:00</updated>
  <id>http://skien.cc/</id>
  <author>
    <name><![CDATA[Erik Taubeneck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Unique Constraints After the Fact in SQLAlchemy]]></title>
    <link href="http://skien.cc/blog/2014/01/31/adding-unique-contraints-after-the-fact-in-sqlalchemy/"/>
    <updated>2014-01-31T16:40:00-05:00</updated>
    <id>http://skien.cc/blog/2014/01/31/adding-unique-contraints-after-the-fact-in-sqlalchemy</id>
    <content type="html"><![CDATA[<p>In a <a href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/">previous post</a>, I wrote about writing a <code>get_one_or_create()</code> function for SQLAlchemy. Turns out that I had inadvertently created a race condition while horizontally scaling on Heroku. That post explains, in detail, the solution I came up with for moving forward, however I still had duplicate objects in my database that needed to remove. Since I&rsquo;m on Heroku, I&rsquo;m using Postgres (although I&rsquo;m highly opinionated towards using Postgres often), so some of this may be Postgres specific, and I will do my best to note when that&rsquo;s the case.</p>

<p>I&rsquo;ll use the same example models that I used in my previous post. We had <code>Game</code> and <code>GameBeat</code> models:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Game</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span>  <span class="o">=</span> <span class="s">&#39;games&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GameBeat</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;game_beats&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;games.id&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">game</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="s">&quot;Game&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">backref</span><span class="o">=</span><span class="s">&quot;beats&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">lazy</span><span class="o">=</span><span class="s">&quot;joined&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">innerjoin</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;users.id&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="s">&quot;User&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">backref</span><span class="o">=</span><span class="s">&quot;game_beats&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">lazy</span><span class="o">=</span><span class="s">&quot;joined&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">innerjoin</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">beat_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>but had accidentally created multiple <code>Game</code> objects with the same <code>provider_game_id</code> attribute. At the very least, we would rather have the class definition and database representation put a unique constraint on this attribute so that if we ever attempted to create such a duplicate <code>Game</code> object, we&rsquo;ll end up raising a <code>IntegrityError</code> and the duplicate won&rsquo;t actually get added to the datastore. (Again, a <a href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/">previous post</a> discusses how to handle this).</p>

<p>The class definition updates to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Game</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span>  <span class="o">=</span> <span class="s">&#39;games&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We still, however need to make the update to our datastore (Postgres, in our case), along with finding and eliminating the duplicates we introduced into the system.</p>

<h2>Using <code>alembic</code> to update the datastore</h2>

<p>If you&rsquo;re not using <a href="http://alembic.readthedocs.org/en/latest/"><code>alembic</code></a> with <code>SQLAlchemy</code>, you&rsquo;re doing it wrong. OK &ndash; that&rsquo;s a bit harsh (and if you&rsquo;re doing it some other way, let me know!), but if you ever plan to change your data model, you&rsquo;ll need to change your datastore along with it, and <code>alembic</code> is an excellent tool to help you along. It&rsquo;s version control for your database schema; think Git for your class models.</p>

<p><code>alembic</code> provides the useful <code>autogenerate</code> option that can be used like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">alembic</span> <span class="o">--</span><span class="n">autogenerate</span> <span class="o">-</span><span class="n">m</span> <span class="s">&quot;add unique constraint to Game.provider_game_id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Some <a href="http://alembic.readthedocs.org/en/latest/tutorial.html#auto-generating-migrations">setup</a> is required to get this option to work.) You should now have a new file in your <code>alembic/versions</code> directory with the name something like <code>10f2a956bad5_add_unique_constrain.py</code>. (Your hash at the beginning is going to almost certainly be different.) If you look at the file, you&rsquo;ll notice that it is mostly empty. Unfortunately, <code>alembic</code> isn&rsquo;t able to identify newly added unique constraints automatically, so we will have to fill it in.</p>

<p>I found the <a href="http://alembic.readthedocs.org/en/rel_0_1/ops.html#alembic.op.create_unique_constraint">documentation</a> on adding a unique constraint a bit confusing at first. The function we want to use is <code>op.create_unique_constraint()</code>, which takes arguments <code>name</code>, <code>source</code>, and <code>local_cols</code>. At first, I thought <code>name</code> was the name of the column which I wanted to make unique, however it&rsquo;s actually the name of the constraint. In my setup (with Postgres), I was able to let <code>name = None</code> and have SQLAlchemy and Postgres sort it out. The <code>source</code> is just a string of the name of the table, and <code>local_cols</code> is where we specify what we want to make unique. The somewhat tricky part here is that we can make a constraint where <code>(col1,col2)</code> needs to be unique (not individually unique, but the combination of the two), so this parameter takes a list. In our case, the list will only have a single member, <code>provider_game_id</code>. Within the <code>upgrade</code> function in our migration file, we can add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">upgrade</span><span class="p">():</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="n">create_unique_constraint</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">&quot;games&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="p">[</span><span class="s">&quot;provider_game_id&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>and under the <code>downgrade</code> function, we can add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">downgrade</span><span class="p">():</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="n">drop_contraint</span><span class="p">(</span><span class="s">&quot;provider_game_id&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">&quot;games&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="s">&quot;unique&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are any existing duplicates and we run this, however, we are going to get an <code>IntegrityError</code>. So it&rsquo;s time to seek and destroy.</p>

<h2>Finding Duplicate Entries</h2>

<p>As we&rsquo;re debugging the situation, one of the first things we&rsquo;ll want see how many duplicates we have of our object along the <code>provider_game_id</code>. I wrote this function do do just that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">func</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">n_dups</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span>\
</span><span class='line'>            <span class="n">having</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this, we&rsquo;ll use <code>n_dups(Game, 'provider_game_id')</code> and likely see something more than zero. All this tells us, however, is how many dups we have along that attribute. We now need to iterate though each duplicated <code>provider_game_id</code> and collect all the objects with said <code>provider_game_id</code>. Getting the duplicated <code>provider_game_ids</code> is similar to above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_duplicated_attrs</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span>\
</span><span class='line'>            <span class="n">having</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we can get the duplicated objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_duplicated_objs</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">attr_value</span><span class="p">,</span> <span class="n">order_by_attr</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">)</span> <span class="o">==</span> <span class="n">attr_value</span><span class="p">))</span><span class="o">.</span>\
</span><span class='line'>            <span class="n">order_by</span><span class="p">(</span><span class="n">order_by_attr</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>order_by_attr</code> is going to come in handy in the next decision when we decide which duplicated objects get the axe.</p>

<h2>Eliminating Duplicate Entries</h2>

<p>While there are a few caveats explained below, our alembic migration file is a good place to identify and eliminate any duplicates, for a few reasons:</p>

<ol>
<li>If our database has duplicates on a row we are asking it to add a unique constraint to, we will get an <code>IntegrityError</code>, so we are required to do this before the command in the migration that adds the constraint is applied. Adding it here means that we always know it will be run before we try to migrate.</li>
<li>I generally don&rsquo;t like to clutter my applications with scripts that are (ideally) only run once, however I also do not want to run something like this in a REPL because you then loose the history of what was run. Adding it here means that we&rsquo;ll not only retain the history, but the exact point in which it was run.</li>
<li>It&rsquo;s already built into my build process (which is just a nice perk for me, but running <code>alembic</code> in your built process helps you to never forget running your migrations.)</li>
</ol>


<p>When we delete the duplicate entries in our database, we have to decide on a rule for which one&rsquo;s to delete, and which <em>one</em> to keep. (You could also delete all, and then recreate them with your new protections against creating duplicates.) I decided to keep the oldest entry (not for any particularly good reason, except that I had originally created my objects with <code>created_at</code> attributes. Our example doesn&rsquo;t have these, so I&rsquo;ll use <code>id</code> which is effectively the same thing assuming the <code>id</code> is auto incremented.) Inside my alembic migration file, I added the following function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">func</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">remove_duplicates</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">duplicates</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">))</span><span class="o">.</span>
</span><span class='line'>                  <span class="n">having</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">attr</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">n_dups</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">duplicates</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;{}.{}: {} duplicates found&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">n_dups</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">duplicate</span> <span class="ow">in</span> <span class="n">duplicates</span><span class="p">:</span>
</span><span class='line'>        <span class="n">objs</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>                <span class="nb">filter</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">attr</span><span class="p">)</span> <span class="o">==</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">duplicate</span><span class="p">,</span> <span class="n">attr</span><span class="p">))</span><span class="o">.</span>
</span><span class='line'>                <span class="n">order_by</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">map</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">,</span> <span class="n">objs</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;{}.{}: {} duplicates removed&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">n_dups</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we can call this function, however, there are a few caveats (which I just ran into the hard way.) First, we will need to import the <code>db</code> object and the <code>Game</code> object. Typically in Python, we only import things at the top of the file, but in order for things like <code>alembic history</code> to work correctly, we need to import these within the <code>upgrade()</code> function. That way, they will only be loaded with a migration is being run, and not when the migration file is inspected for things like the version number by other tools.</p>

<p>Second, if you are doing a &ldquo;dry run&rdquo; <code>alembic upgrade head</code> (i.e. from a newly created DB with no schema), alembic works through all the migration files and issues one SQL statement at the end of the process. This is a problem if you attempt to query on the <code>Game</code> object, who&rsquo;s table doesn&rsquo;t exist yet. We can safely assume, however, that if the table doesn&rsquo;t exist yet, it doesn&rsquo;t have any duplicates. Luckily, SQLAlchemy has an <code>Inspector</code> object that allows reflection into the existing tables from and engine, and using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inspector</span> <span class="o">=</span> <span class="n">Inspector</span><span class="o">.</span><span class="n">from_engine</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">engine</span><span class="p">)</span>
</span><span class='line'><span class="n">existing_tables</span> <span class="o">=</span> <span class="n">inspector</span><span class="o">.</span><span class="n">get_table_names</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>will do the the trick. Now, within the <code>upgrade()</code> function we call our <code>remove_duplicates</code> function for the objects and their attributes with duplicates like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy.engine.reflection</span> <span class="kn">import</span> <span class="n">Inspector</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">upgrade</span><span class="p">():</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">db</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">Game</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">inspector</span> <span class="o">=</span> <span class="n">Inspector</span><span class="o">.</span><span class="n">from_engine</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">engine</span><span class="p">)</span>
</span><span class='line'>    <span class="n">existing_tables</span> <span class="o">=</span> <span class="n">inspector</span><span class="o">.</span><span class="n">get_table_names</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">Game</span><span class="o">.</span><span class="n">__tablename__</span> <span class="ow">in</span> <span class="n">existing_tables</span><span class="p">:</span>
</span><span class='line'>        <span class="n">remove_duplicates</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">,</span> <span class="n">Game</span><span class="p">,</span> <span class="s">&#39;provider_game_id&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="n">create_unique_constraint</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">&quot;games&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="p">[</span><span class="s">&quot;provider_game_id&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>and our <code>downgrade</code> function stays the same as above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">downgrade</span><span class="p">():</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="n">drop_contraint</span><span class="p">(</span><span class="s">&quot;provider_game_id&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">&quot;games&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="s">&quot;unique&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note: the import statements that happen outside of the functions can just be placed at the top of the migration file. They shouldn&rsquo;t cause any conflicts.)</p>

<p>Woo! That&rsquo;s it. There are certainly a few <em>hacks</em> in here, so as usual, through some feedback in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Markdown]]></title>
    <link href="http://skien.cc/blog/2014/01/23/on-markdown/"/>
    <updated>2014-01-23T19:12:29-05:00</updated>
    <id>http://skien.cc/blog/2014/01/23/on-markdown</id>
    <content type="html"><![CDATA[<h2>In the beginning, there was LaTeX</h2>

<p>As a former mathematics student, I have an unusual soft spot for <a href="http://www.latex-project.org/">LaTeX</a>. Despite it&rsquo;s obscenely verbose and quirky syntax, it was more than a breath of fresh air compared to Word&rsquo;s Equation Editor. (It required a highlighting, 4 clicks, and keyboard input to create an exponent, if I remember correctly.) But not only does LaTeX keep your fingers on the keyboard, it&rsquo;s output is <a href="http://www.somethingofthatilk.com/index.php?id=135">the most beautiful thing I&rsquo;ve ever laid eyes on</a>. I mean, just look at this inequality:</p>

<p><img src="images/latex-example.png"></p>

<!-- more -->


<p>Even using a slew of macros and shortcuts, reading LaTeX code is burdensome at best, and this will forever keep it&rsquo;s use out of the main stream. Worse, making formatting changes in LaTeX is onerous. Luckily for math students their are really great one&rsquo;s already created that are perfect for your homework, and journals traditionally provide their own. (My University library did not, however. Spent at least 8 hours and an argument with the librarian working on the Title page with spots for my advisors&#8217; signatures&#8217;.) Because of this, LaTeX will never be a mainstream word processor.</p>

<p>However, I think there is one core design aspect of LaTeX that is far more ideal than traditional word processors: separation of corpus and design.</p>

<h2>Enter Markdown</h2>

<p>Markdown was created in 2004 with the idea to &ldquo;make writing simple web pages, and especially weblog entries, as easy as writing an email&rdquo; (quote from the late Aaron Swartz&rsquo;s <a href="http://www.aaronsw.com/weblog/001189">blog post announcing the release</a>.) It has gained a deal of popularity in web culture on sites such as <a href="https://www.reddit.com">reddit</a> and <a href="https://www.github.com">GitHub</a>, as well with some excellent hacker tools like <a href="http://ipython.org/notebook.html">iPython Notebook</a> and <a href="http://octopress.org">Octopress***</a>. (This site is powered by Octopress and each post is written in Markdown.)</p>

<p>There is a more thorough example on wikipedia <a href="http://en.wikipedia.org/wiki/Markdown">Wikipedia</a>, but for example <code>*italics*</code> renders as <em>italicts</em>, <code>**bold**</code> as <strong>bold</strong>, and <code>[links](http://skien.cc)</code> as <a href="http://skien.cc">links</a>.</p>

<p>The really clever thing here is that for <em>most</em> documents, there is very limited formatting to add. For web documents, like blog posts and comment sections, you mostly need sections, paragraphs, italics, bold, links, inline images, and inline quotes. Developers like the ability to add in text <code>code</code> and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>inline code blocks.</span></code></pre></td></tr></table></div></figure>


<p>Best of all, you don&rsquo;t have to write in HTML (Who want&rsquo;s to write an article in <em>raw</em> HTML? Ain&rsquo;t nobody got time for that.) and you can achieve a great deal of formatting.</p>

<h3>A Business Case</h3>

<p>The key is separating the writing of a document from the design of a document, and Markdown achieves this with flying colors. For the author, the marked up text is easy to read and easy to write. For the designer, the CSS likely already exists if you have a website (although they may wish to update it slightly.)</p>

<p>A system for sharing these documents like developers share <a href="https://gist.github.com/">Gists</a> could easily replace email attachments and grant extra security  (either through obscurity or something stronger.) Authors could also update or take down old documents, whereas an attachment lives on in the receivers inbox forever. (Nothing would would prevent the viewer from saving the content when they see it, but this would require premeditation and would be a rather uncommon event in my opinion.)</p>

<p>If you&rsquo;d like to create PDF&rsquo;s, it&rsquo;s not too painful create a base template in, you guessed it, LaTeX, and then produce PDF&rsquo;s for printed material (or for when you&rsquo;d really like to send an attachment rather than a link.) And if you <em>really</em> need to, you can even generate a Word document. After the initial fixed cost of developing these templates, you&rsquo;ll have a dead simple way to generate standardized documents without the variable cost of worrying about format on each one.</p>

<p>Many free tools exists to work with Markdown as well. One of my favorites is <a href="http://mouapp.com/">Mou</a>, which allows you to view a rendered version of the file side by side with an editor. (I&rsquo;m using it now.) <a href="http://dillinger.io/">Dillinger</a> does the same thing in the browser, and can connect to Dropbox, GitHub, and Google Drive. As more tools like these emerge, I predict a sharp decline in demand for over powered text editors like Microsoft Word.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy and Race Conditions: Implementing `get_one_or_create()`]]></title>
    <link href="http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing/"/>
    <updated>2014-01-15T13:57:00-05:00</updated>
    <id>http://skien.cc/blog/2014/01/15/sqlalchemy-and-race-conditions-implementing</id>
    <content type="html"><![CDATA[<p>Note: Examples here are built with respect to <a href="http://pythonhosted.org/Flask-SQLAlchemy/">Flask SQLAlchemy</a>, and while some notation may match that convention, the concepts should apply to use of <a href="http://www.sqlalchemy.org/">SQLAlchemy</a> in general.</p>

<h2>Motivation</h2>

<p>Suppose we have a <a href="http://flask.pocoo.org/">Flask</a> app that interacts with an API on a site that hosts webgames. Our users have OAuth&#8217;ed our application into the API so we can see their activity, and we want to track which games they have beat. (We&rsquo;ll assume that users only beat a game once or more generally we are only concerned with the first time they beat it.) We create the <code>Game</code> and <code>GameBeat</code> models like so:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Game</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span>  <span class="o">=</span> <span class="s">&#39;games&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GameBeat</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&#39;game_beats&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;games.id&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">game</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="s">&quot;Game&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">backref</span><span class="o">=</span><span class="s">&quot;beats&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">lazy</span><span class="o">=</span><span class="s">&quot;joined&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">innerjoin</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;users.id&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="s">&quot;User&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">backref</span><span class="o">=</span><span class="s">&quot;game_beats&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">lazy</span><span class="o">=</span><span class="s">&quot;joined&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">innerjoin</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">beat_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few notes on these models. This assumes that each <code>Game</code> object coming from the API has an <code>id</code>, <code>name</code>, and <code>category</code> attribute, and anytime a game is beat by a user, you can get the datetime of when it was beat. One other convention is using <code>db.String(255)</code> for <code>provider_game_id</code> (rather than <code>db.Integer</code>). You will often see this with APIs where the <code>ids</code> can be very large integers (think of the number of Tweets on Twitter for example), and while Python handles big ints well, unless you want to use big ints for actually doing math, a string will be much more efficient (and you&rsquo;ll be less likely to have an issue with your backend datastore).</p>

<h2>Implementing a basic <code>get_one_or_create()</code></h2>

<p>NOTE: The original implementation I used was first inspired from <a href="http://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create">this Stack Overflow</a> question.</p>

<p>If you&rsquo;ve ever played around with <a href="https://www.djangoproject.com/">Django</a>, you&rsquo;ve probably seen the <code>get_or_create()</code> function, but if not the concept is straight forward. First look for an object given a set of constraints, and if it doesn&rsquo;t exist, create it. The usefulness here is pretty obvious in our above example. Without it, given a list of <code>game_beats</code> from the API and a <code>user</code>, we&rsquo;d have to do something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">game_beat_data</span> <span class="ow">in</span> <span class="n">game_beat_data_list</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Game</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Game</span><span class="o">.</span><span class="n">provider_game_id</span> <span class="o">==</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_id&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">count</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">game</span> <span class="o">=</span> <span class="n">Game</span><span class="p">(</span><span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_id&#39;</span><span class="p">],</span>
</span><span class='line'>                    <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_name&#39;</span><span class="p">],</span>
</span><span class='line'>                    <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_category&#39;</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">game</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Game</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Game</span><span class="o">.</span><span class="n">provider_game_id</span> <span class="o">==</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_id&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">one</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">GameBeat</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">GameBeat</span><span class="o">.</span><span class="n">game</span> <span class="o">==</span> <span class="n">game</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">GameBeat</span><span class="o">.</span><span class="n">user</span> <span class="o">==</span> <span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">game_beat</span> <span class="o">=</span> <span class="n">GameBeat</span><span class="p">(</span><span class="n">game</span> <span class="o">=</span> <span class="n">game</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">user</span> <span class="o">=</span> <span class="n">user</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">beat_at</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;beat_at&#39;</span><span class="p">]</span>
</span><span class='line'>                             <span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">game_beat</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">GameBeat</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">GameBeat</span><span class="o">.</span><span class="n">game</span> <span class="o">==</span> <span class="n">game</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">GameBeat</span><span class="o">.</span><span class="n">user</span> <span class="o">==</span> <span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">()</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">game_beat</span><span class="p">)</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is quite verbose, and the logic is repeated twice, so it seems like a perfect place to write a function. Here&rsquo;s a first attempt, (and we&rsquo;ll build from here):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy.orm.exc</span> <span class="kn">import</span> <span class="n">NoResultFound</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_one_or_create</span><span class="p">(</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">model</span><span class="p">,</span>
</span><span class='line'>                      <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>   <span class="k">try</span><span class="p">:</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">()</span>
</span><span class='line'>   <span class="k">except</span> <span class="n">NoResultFound</span><span class="p">:</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">model</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a couple small differences here. Most obvious is the change to a <code>try/except</code> block rather than getting the <code>count()</code> explicitly. The advantage here is that if the object exists, we only have to make one call to the datastore. The other is the use of <code>filter_by()</code>, which is just a version of <code>filter</code> that uses keyword arguments.</p>

<p>Using this function, our above example now becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">game_beat_data</span> <span class="ow">in</span> <span class="n">game_beat_data_list</span><span class="p">:</span>
</span><span class='line'>    <span class="n">game</span> <span class="o">=</span> <span class="n">get_one_or_create</span><span class="p">(</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Game</span><span class="p">,</span>
</span><span class='line'>        <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;game_id&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">game_beat</span> <span class="o">=</span> <span class="n">get_one_or_create</span><span class="p">(</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>        <span class="n">GameBeat</span><span class="p">,</span>
</span><span class='line'>        <span class="n">game</span> <span class="o">=</span> <span class="n">game</span><span class="p">,</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=</span> <span class="n">user</span><span class="p">,</span>
</span><span class='line'>        <span class="n">beat_at</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;beat_at&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">game_beat</span><span class="p">)</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, since I&rsquo;ve broken the inputs into our function onto multiple lines, we&rsquo;ve only dropped from 17 lines to 15, however I&rsquo;d still argue this is a HUGE decrease in complexity. We can now actually fit in under 80 characters without having to use <code>\</code> for newlines, but more generally, it&rsquo;s simply more readable.</p>

<h2>A small modification</h2>

<p>I&rsquo;m not going to motivate this, but sometimes you&rsquo;ll want to know if the object you&rsquo;re getting back was newly created or pulled from the datastore, so we can easily return a <code>bool</code> as well by updating our function to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy.orm.exc</span> <span class="kn">import</span> <span class="n">NoResultFound</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_one_or_create</span><span class="p">(</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">model</span><span class="p">,</span>
</span><span class='line'>                      <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>   <span class="k">try</span><span class="p">:</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">(),</span> <span class="bp">True</span>
</span><span class='line'>   <span class="k">except</span> <span class="n">NoResultFound</span><span class="p">:</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">model</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">),</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>and now we just have to remember that when we use it, to unpack into two variables</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">obj</span><span class="p">,</span> <span class="n">exists</span> <span class="o">=</span> <span class="n">get_one_or_create</span><span class="p">(</span> <span class="err">…</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or else we will end up with a <code>tuple</code> where we expected <code>obj</code>.</p>

<h2>The <code>@classmethod</code> decorator</h2>

<p>One of my favorite Python patterns is using the <code>@classmethod</code> decorator with a creator function. In our above example, suppose we want to be able to create a <code>Game</code> object, but we may or may not have the <code>provider_game_name</code> and <code>provider_game_category</code> immediately available. We can update our model definition (assuming we have a <code>get_game_data_from_api</code> function from our API):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Game</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span>  <span class="o">=</span> <span class="s">&#39;games&#39;</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="n">create_from_provider_game_id</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">provider_game_id</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;provider_game_name&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;provider_game_category&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">provider_game_name</span> <span class="ow">and</span> <span class="n">provider_game_category</span><span class="p">:</span>
</span><span class='line'>            <span class="n">game_data</span> <span class="o">=</span> <span class="n">get_game_data_from_api</span><span class="p">(</span><span class="n">provider_game_id</span><span class="p">)</span>
</span><span class='line'>            <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">game_data</span><span class="p">[</span><span class="s">&#39;provider_game_name&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">game_data</span><span class="p">[</span><span class="s">&#39;provider_game_category&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">provider_game_id</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">provider_game_name</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">provider_game_category</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>now if we do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="n">Game</span><span class="o">.</span><span class="n">create_from_provider_game_id</span><span class="p">(</span><span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>we get a new <code>Game</code> object which will ping the API in order to get the other data to fill it out. But, if we already have the data (or we <em>maybe</em> have the data), we can do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="n">Game</span><span class="o">.</span><span class="n">create_from_provider_game_id</span><span class="p">(</span>
</span><span class='line'>           <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">],</span>
</span><span class='line'>           <span class="n">provider_game_name</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
</span><span class='line'>           <span class="n">provider_game_category</span> <span class="o">=</span> <span class="n">game_beat_data</span><span class="p">[</span><span class="s">&#39;game&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;category&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>       <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like to think of writing code like this as being <em>fault tolerant</em>. If you&rsquo;ve played with external APIs before, their behavior can often change slightly. Moreover, writing code like this gives me a consistent pattern, so if in one case I have a collection of <code>dict</code>s from an API with all the relevant game data, and in another case I only have a collection of the <code>provider_game_id</code>s, I can use the same pattern. If I have all the data, I can save myself <code>n</code> calls to the API, and if I&rsquo;m not sure (or maybe the API is inconsistent &ndash; yes it happens), it will still work.</p>

<h2>Updating <code>get_one_or_create</code></h2>

<p>It&rsquo;s quickly obvious that our current implementation of <code>get_one_or_create()</code> won&rsquo;t handle such pattern for creating model instances. But this is programming, we are the creators. Let&rsquo;s update our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy.orm.exc</span> <span class="kn">import</span> <span class="n">NoResultFound</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_one_or_create</span><span class="p">(</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">model</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">create_method</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">create_method_kwargs</span><span class="o">=</span><span class="p">{},</span>
</span><span class='line'>                      <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">(),</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">NoResultFound</span><span class="p">:</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">create_method_kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">create_method</span><span class="p">,</span> <span class="n">model</span><span class="p">)(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">),</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for adding this <code>create_method_kwargs</code> <code>dict</code> is fairly straight forward: consider a case where we need to hand a <code>user</code> to our API method <code>get_game_data_from_api</code>, but we don&rsquo;t store a <code>user</code> on the <code>Game</code> object and certainly don&rsquo;t want to include it in the <code>filter_by</code>.</p>

<p>At this point, we have a pretty robust <code>get_one_or_create()</code> function that worked quite well for me, until it didn&rsquo;t.</p>

<h2>An Unexpected Exception</h2>

<p>By using my newly minted <code>get_one_or_create()</code> wherever I create objects, you can imagine my surprise when <code>MultipleResultsFound</code> exceptions starting being raised when trying to <code>get_one_or_create()</code> a <code>Game</code>. I scoured my code for any place that I created a <code>Game</code>; luckily <code>grep</code> makes this easy. Nothing. I expanded my test so that I was mocking a scan for 100 users. Nothing. Maybe there was a unicode issue where the <em>get</em> part was trying to match to a unicode to string (and failing) but the <em>create</em> part was then creating the attribute as a string. A new test quickly disproved this. Nothing.</p>

<p>I was lost. I was writing tests <em>hoping</em> that they would fail just so I could figure out what was going wrong. And it was 4am. I <em>hate</em> going to sleep at a point like this. (I use <em>sleep</em> loosely here &ndash; I generally don&rsquo;t sleep well and lay awake trying to figure out how to fix my problem.) I&rsquo;m not sure if it was that night or the next morning (or even when you draw the line going to bed at 4am for that matter…), but I eventually realized why I was getting duplicate objects in my datastore.</p>

<p>During the time between the <em>get</em> call when the object doesn&rsquo;t exist and the call to <code>db.session.commit()</code>, the object was created somewhere else. I was using Celery to batch the update and it was a brand new scan, so a lot of stuff was being created. Since the <code>db.session.commit()</code> comes at the end of the loop, there can actually be a fair amount of time between these calls. But even if a <code>db.session.commit()</code> happened sooner, we want to be <em>sure</em> that another matching object didn&rsquo;t get created between the <em>get</em> and <em>create</em> parts of a function.</p>

<h2>Celery &ldquo;async&rdquo; and Race Conditions</h2>

<h3><code>@celery.task()</code></h3>

<p>I use quotes here in the way I&rsquo;d use air quotes if we were talking: the <a href="http://www.celeryproject.org/">Celery</a> async task model isn&rsquo;t true async in the way that <a href="http://twistedmatrix.com/trac/">Twisted</a> or <a href="http://docs.python.org/3.4/library/asyncio.html"><code>asyncio</code></a> is. Instead it uses an external messaging system (I use <a href="http://redis.io/">Redis</a> &ndash; mostly due to the price on <a href="https://www.heroku.com/">Heroku</a>). Functions and their inputs (remember that in Python, functions, like everything else, are objects) are JSONified, stored in the message system, and then deJSONified and executed in a completely separate process.</p>

<p>It does become more complicated if you care about the result of a function call, but often you call functions only for their side effects. Sometimes you&rsquo;ll want to kick off a job of a few such function calls as a result of a web request. If the job takes awhile (anything more than a second) you certainly do not wish to wait (or can&rsquo;t, eventually you&rsquo;ll timeout) for that function to complete before responding. Celery makes this pattern straight forward, if not easy, to accomplish with a synchronous web framework like Flask.</p>

<p>Celery also makes it really easy to horizontally scale a batch of jobs. Suppose we want to update the <code>GameBeat</code>s for all our users. We could create a celery task like so</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">celery</span><span class="p">,</span> <span class="n">db</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">User</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app.provider_apis</span> <span class="kn">import</span> <span class="n">get_provider_api</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@celery.task</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update_game_beats_for_user_id</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">api</span> <span class="o">=</span> <span class="n">get_provider_api</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">game_beat_data_list</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">get_game_beats</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">game_beat_data</span> <span class="ow">in</span> <span class="n">game_beat_data_list</span><span class="p">:</span>
</span><span class='line'>        <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the <code>…</code> completes the pattern above showing the usage of <code>get_one_or_create()</code>. We can now create a task for each user by running</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">app.tasks</span> <span class="kn">import</span> <span class="n">update_game_beats_for_user_id</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">db</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app.models</span> <span class="kn">import</span> <span class="n">User</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span>
</span><span class='line'>    <span class="n">update_game_beats_for_user_id</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to spin up a number of Celery workers (Heroku for this is as easy as scrolling a slider on a web interface and clicking &ldquo;Apply&rdquo;, or a single short bash command) and get all these tasks done quickly.</p>

<h3>Race Conditions</h3>

<p>Whenever you have multiple concurrent processes interacting with an external service, you have to be concerned about race conditions, e.g. from the perspective of any process, the state of that external service may change at anytime without any interaction from that process. Luckily, Celery is designed to handle this and maps jobs out in a way that no two processes will receive the same message.</p>

<p>SQLAlchemy even has some protection against this, although I&rsquo;m not sure exactly how it&rsquo;s implemented. I do know that if I have an <code>ipython</code> shell open with a transition pending, a query in another process will stall. This goes out the window, however, when we&rsquo;re working with Celery workers on separate Heroku instances or even separate web instances. So we certainly want to protect against this type of thing in production.</p>

<p>In our example, since we plan to look up <code>Game</code> objects by <code>provider_game_id</code> and expect only one instance, we should have defined that column with a unique constraint like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Game</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="n">provider_game_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luckily we can make this change after the fact (which I won&rsquo;t show here, but I plan to write about next). Had we done this originally, we would never have gotten the <code>MultipleResultsFound</code> exception, but instead would have gotten a <code>IntegrityError</code> when trying to execute <code>db.session.commit()</code> of an transition that would <em>create</em> our duplicated item. This is desirable since the exception comes <em>before</em> the duplicate is introduced into the datastore. However, it would be best for our <code>get_one_or_create</code> function to take care of this as well.</p>

<h2>A &ldquo;final&rdquo; <code>get_one_or_create()</code></h2>

<p>Again, think air quotes. As a developer, I never think or anything as final. Or maybe I always think an implementation is final, and I&rsquo;m always wrong. Regardless, of the concerns I&rsquo;ve reached so far, here is a &ldquo;final&rdquo; version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_one_or_create</span><span class="p">(</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">model</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">create_method</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">create_method_kwargs</span><span class="o">=</span><span class="p">{},</span>
</span><span class='line'>                      <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">(),</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">NoResultFound</span><span class="p">:</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">create_method_kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">created</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">create_method</span><span class="p">,</span> <span class="n">model</span><span class="p">)(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">created</span><span class="p">)</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">created</span><span class="p">,</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">IntegrityError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">one</span><span class="p">(),</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what&rsquo;s happening. It tries to find the right object, and if it finds it, it returns it. If not, it creates it, adds it to the session, and attempts to commit. In the mean time, if another process has created and committed an object with the same details we filtered by, an <code>IntegrityError</code> raises and is caught. This means we should be able to get the newly created object, so we now get that and return it.</p>

<p>You&rsquo;ll notice one major difference from our earlier versions: <code>session.commit()</code> is now in the function. I&rsquo;ve avoided doing this thus far due to the recommended usage in the SQLAlchemy documentations on <a href="http://docs.sqlalchemy.org/en/latest/orm/session.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it">sessions</a>:</p>

<blockquote><p>As a general rule, keep the lifecycle of the session separate and external from functions and objects that access and/or manipulate database data.</p></blockquote>

<p>The reason we must add this into our function call here, is that if we do the <code>db.session.commit()</code> after making several calls to <code>get_one_or_create()</code> and the <code>IntegrityError</code> was raised, we&rsquo;d have no idea which created object caused it and we&rsquo;d have to start the entire transaction over (and we&rsquo;d have to write logic outside the function to handle all this). Since our <code>get_one_or_create()</code> function is written generally for any model and unique keywords, rather than specific logic tied to a specific model, I don&rsquo;t think it seriously conflicts with the SQLAlchemy philosophy.</p>

<h2>Final Thoughts</h2>

<p>Race conditions and asynchronous programing are difficult, especially when working in a framework that doesn&rsquo;t force you to work or think that way. Flask and certainly Flask-SQLAlchemy aren&rsquo;t extremely well suited to handle this, but also with Flask&rsquo;s synchronous handling of requests, it doesn&rsquo;t become a issue often. When scaling, however, you being to increase the probability of such occurrences happen.</p>

<p>How does this work in Tornado or Twisted? My friend and former colleague <a href="https://github.com/bmuller">Brian Muller</a> wrote <a href="http://findingscience.com/twistar/">Twistar</a>, a Python implementation of a nonblocking active record pattern interface to relational databases (built to use with Twisted). It&rsquo;s been on my list of packages to read. To some extent, building a webapp in Twisted has a high upfront cost, but it also has this added value of forcing you to think deeper and see these problems before you have a few hundred duplicated entries in your database.</p>

<p>I love Flask and the community, and it has all been very good to me as being quite new to web app development, but part of me wants to start playing around with the JS template systems like <a href="http://facebook.github.io/react/">React</a>. This also makes sense as you start getting into the realm of iOS and Android apps. At some point you have many different &ldquo;front ends&rdquo; and your backend is really just serving up data to fill it. At that point, a centralized template system like Jinja makes less sense, and moving from Flask to Twisted makes more sense.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask-Twitter-OEmbedder and Flask Extension Testing]]></title>
    <link href="http://skien.cc/blog/2013/06/26/flask-twitter-oembedder-and-flask-extension-testing/"/>
    <updated>2013-06-26T15:37:00-04:00</updated>
    <id>http://skien.cc/blog/2013/06/26/flask-twitter-oembedder-and-flask-extension-testing</id>
    <content type="html"><![CDATA[<h2>Flask-Twitter-OEmbedder</h2>

<p>The Twitter API V1.1 provides an endpoint for easily <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/oembed">embedding tweets</a> into your webpages. However, Twitter rate limits this endpoint and requires authorization. Flask Twitter OEmbedder gets your Twitter credentials from your <code>app.config</code> and exposes the <code>oembed_tweet</code> function to the Jinja templates. Flask Twitter OEmbedder also manages the caching of the tweets, given an arbitrary cache using Flask-Cache.</p>

<p>You can check it out and fork it on <a href="https://github.com/eriktaubeneck/flask-twitter-oembedder">GitHub</a>. Feature requests, issues, and anything else are encouraged! This is very much alpha and I plan to continue working on it.</p>

<h2>Flask Extension Testing</h2>

<p><a href="https://github.com/eriktaubeneck/flask-twitter-oembedder">Flask-Twitter-OEmbedder</a> was the first Flask extension I have written (and really the first proper Python package I&rsquo;ve ever written). This summer I am lucky enough to be participating in <a href="https://www.hackerschool.com/">Hacker School</a> and one of my goals for the batch was to be able to write unit tests for my code that I develop. Since this was my first proper package, I figured it was a great place to start.</p>

<!-- more -->


<p>Testing in the abstract seems reflexive and redundent; I wrote code specifically to perform <code>x</code>, why would I write more code to make sure that it does <code>x</code>? This was a particularly difficult mental block for me, especially coming to development from mathematics. However, as your code base grows and relies on more and more abstraction, when something breaks, testing helps you find exactly what you broke and where to fix it. It&rsquo;s not uncommon for libraries and extensions to change their API&rsquo;s at times, in which case it may not even be code that you wrote to do <code>x</code>, and now it does <code>y</code>. Luckily earlier this year, I attended PyCon and saw <a href="http://pyvideo.org/video/1674/getting-started-with-automated-testing">this</a> great presentation on getting starting with automated testing Python.</p>

<p>After getting past my mental testing block, I was faced with a few other challanges with getting testing working with my Flask extension. I had broken my extension into a handful of base states which I wanted to test:</p>

<ul>
<li>the <code>oembed_tweet()</code> function is avaliable in the Jinja templates</li>
<li>the <code>oembed_tweet()</code> function properly embeds a tweet when given a valid tweet id</li>
<li>the <code>oembed_tweet()</code> function fails properly (depending on the <code>app.debug</code> and local <code>debug</code> state) when given an invalid tweet id</li>
</ul>


<p>Each of these presented their own challanges. The first challange however, was just approaching the problem at hand. The testing documentation for Flask is all based for testing Flask apps, not Flask extensions. However, it quickly became clear that it was sufficent to use <a href="http://pythonhosted.org/Flask-Testing/">Flask-Testing</a> to create a &ldquo;dummy&rdquo; app which would utilize my extension and be able to test if it worked properly.  Unfortunetly, Flask-Testing doesn&rsquo;t have a method like <code>assertExists</code>, so I ended up testing</p>

<pre><code> assert type(self.get_context_variable('oembed_tweet')) is types.FunctionType
</code></pre>

<p>The next challange was being able to run the tests offline. In general, unit tests shouldn&rsquo;t care if external API&rsquo;s are working or not. It is certainly useful and appropriate in some cases to write tests that to check for this, but for this test we just want to know if our code is working as expected, assuming that Twitter&rsquo;s API is working correctly.We(I paired with one of the awesome Hacker School facilitators, <a href="https://github.com/zachallaun">Zach Allaun</a>) started with <a href="https://github.com/kevin1024/vcrpy">vcrpy</a>, which is a port of the Ruby <a href="https://github.com/vcr/vcr">vcr</a> gem, however this didn&rsquo;t work quite right. We then moved onto <a href="https://github.com/uber/cassette">cassette</a> but it unfortunetly didn&rsquo;t play nice with HTTPS. Finally we landed on <a href="https://github.com/gabrielfalcao/HTTPretty">HTTPretty</a> which did exactly what we needed. We grabbed the actual response from Twitter and dumped it into a JSON, then HTTPretty blocks any out going requests to specific urls and returns the content of the JSON as if the request had gone through normally. It can be used as followed:</p>

<pre><code>@httpretty.activate    
def test_oembed_tweet_valid_id_debug_off(self):
    with open('tests/data/99530515043983360.json') as f:
        httpretty.register_uri(httpretty.GET, 'https://api.twitter.com/1.1/statuses/oembed.json?id=99530515043983360',
            body = f.read())
    response = self.client.get('/')
    oembed_tweet = self.get_context_variable('oembed_tweet')
    valid = oembed_tweet('99530515043983360')
    assert type(valid) is Markup
</code></pre>

<p>In this example, the <code>oembed_tweet</code> fuction makes a GET request using the <code>requests</code> package to the <code>uri</code> that we specified in the <code>httpretty.register_uri()</code> call, and the response is what we specified as the <code>body</code> in the same function.</p>

<p>One final interesting case is when we wanted to test what happens when we want to test how Flask-Twitter-OEmbedder handles an error from the Twitter API. In a development setting, we likely want this to actually raise an exception so that we can investigate what is causing the error (this could be a number of things: incorrect tweet id, Twitter API outage, deleted tweet, etc), but in production we would likely want it to fail gracefully and just return an empty string. Testing for an exception is fairly straight forward:</p>

<pre><code>try:
    invalid = oembed_tweet('abc')
except Exception as e:
    assert type(e) is KeyError
</code></pre>

<p>There is one little trick here, however, that is easy to overlook. We are expecting the second line to fail, and then we are asserting that the failure is the type that we expect. However, what if the second line doesn&rsquo;t fail? In the context of the test, we would classify this as a failure, since the failure on line 2 is what we want. But in the code above, if line 2 doesn&rsquo;t fail for some reason, the <code>assert</code> will never happen and the test will pass. We can fix this by adding one line after line 2:</p>

<pre><code>try:
    invalid = oembed_tweet('abc')
    assert False
except Exception as e:
    assert type(e) is KeyError
</code></pre>

<p>The addition of <code>assert False</code> will force the <code>try</code> clause to fail, even if line 2 doesn&rsquo;t fail as expected, and since <code>assert False</code> raises an <code>Assertion Error</code>, line 5 will fail properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlocking Technology]]></title>
    <link href="http://skien.cc/blog/2013/05/21/unlocking-technology/"/>
    <updated>2013-05-21T11:26:00-04:00</updated>
    <id>http://skien.cc/blog/2013/05/21/unlocking-technology</id>
    <content type="html"><![CDATA[<p>I recently read an opinion piece on Wired, <a href="http://www.wired.com/opinion/2013/05/dont-let-them/">Beyond Unlocking: Don&rsquo;t Let Them Kill the First Decent Copyright Reform</a> by Kyle Wiens. The author touts the bill as &ldquo;<em>not</em> a band-aid,&rdquo; but &ldquo;a solution&rdquo; because</p>

<blockquote><p>[it] would allow all consumers to circumvent the digital locks on their mobile devices. Anyone could access and modify software on their devices, in the same way they already modify and repair hardware.</p></blockquote>

<p>On the surface, this seems like pretty clear position. I bought my hardware, I own it, I should be able to take it apart and use it however I want! The only reason tech companies would want to put digital locks on whatever devices they sell is because they want to maintain complete control of their platform and make more money. Those damn corporate fat cats! How could you not want to support such a clear and open policy?</p>

<p>But I argue (in homage to <a href="http://www.freakonomics.com/">Freakonomics</a>) that there is a hidden side here.</p>

<!-- more -->


<p>One of Wiens &ldquo;side effects&rdquo; of the current &ldquo;faulty approach&rdquo; to copyright is &ldquo;scientists who can&rsquo;t install Linux on game consoles to build affordable <a href="http://www.syracuse.com/news/index.ssf/2011/03/rome_labs_supercomputer_is_mad.html">supercomputer</a> cluster <a href="http://www.joystiq.com/2010/05/12/air-force-disappointed-by-ps3s-other-os-removal/">for research</a> purposes.&rdquo; This is my first clue that something is quite wrong here. I&rsquo;ve seen some cool stuff with <a href="http://arstechnica.com/security/2012/12/25-gpu-cluster-cracks-every-standard-windows-password-in-6-hours/">GPU hacking</a>, but what the hell do these guys need with the controller that comes with each console? For a 25-core system, you&rsquo;d get 25 disc drives, 25 hdmi ports, and 25 hard drives when you&rsquo;re probably using an entirely separate data store.</p>

<p>The answer? Video game consoles are cheaper than the parts inside of them. If you google <a href="https://www.google.com/search?q=video+game+console+lose+money&amp;aq=f&amp;oq=video+game+console+lose+money">&ldquo;video game console lose money&rdquo;</a>, it&rsquo;s pretty obvious that consoles like the Xbox 360 and Playstation 3 end up at a market price that is well below the cost of the parts and labor required to produce them. This probably shouldn&rsquo;t come as a huge surprise; it&rsquo;s not a secret that these consoles are sold at a loss to generate greater demand for the games.</p>

<p>So what about these scientists, who aren&rsquo;t purchasing any games for their PS3s? In economic terms, these uses are receiving a subsidy towards their hardware. The cost of this subsidy is shared between consumers who purchase games and the producers of the consoles (the ratio of which is dependent on the demand elasticity of the console). Gamers should be upset about this. Their games are both more expensive and also receive less R&amp;D funding because others are abusing an arbitrage.</p>

<p>I think everyone can agree that generally, stealing is bad. Property law is one of the main functions of government, and intellectual property is difficult. But when someone hacks a PS3 or unlocks their iPhone, they are not only stealing from the likes of Sony or Apple, but also from consumers. So how about a compromise. Require all technology to have the ability to be unlocked, which is available at a market driven price (along with a likely change or loss of warranty). This allows manufacturers to reclaim their losses on consoles that won&rsquo;t be used for their intended use, and still allow anyone to use their technology however they want. But I want to use my iPhone with the app store, and I want to use my XBox 360 to play Mass Effect and Portal, and I want that subsidy because I&rsquo;m OK playing by the rules. The economic impact of this policy would be a sharp increase in price of all of our devices; that means less people will buy them, less money will be spent on apps (and threaten the emerging cottage industry), and less money will be spent on the R&amp;D on technology as a general.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[print can be deceiving]]></title>
    <link href="http://skien.cc/blog/2013/03/19/print-can-be-deceiving/"/>
    <updated>2013-03-19T11:42:00-04:00</updated>
    <id>http://skien.cc/blog/2013/03/19/print-can-be-deceiving</id>
    <content type="html"><![CDATA[<p>This is more of a short musing than a blog post, but maybe some insight that can help a beginner. This is written specifically with respect to Python, but I think some of the basic ideas translate to other object oriented languages.</p>

<h2>when <code>print</code> was your best friend</h2>

<p>When someone is new to Python, and more so when new to programming in general, <code>print</code> is your best friend. Learning a new language is done by comparing what you expect happen and what actually happen. The prototypical example in any language is</p>

<pre><code>print 'Hello World!'
</code></pre>

<p>and a new comer to Python going through something like <a href="http://learnpythonthehardway.org/">Learn Python the Hard Way</a> (LPTHW) will spend a number of lessons where a script ends with a <code>print</code> statement revealing the <em>answer</em>. This is notable because in a production system, <code>print</code> isn&rsquo;t used much at all, unless something goes wrong.</p>

<!-- more -->


<h2>when <code>print</code> isn&rsquo;t used</h2>

<p>There are varying types of &ldquo;systems&rdquo; you can build in Python: (in rough order of rising complexity) scripts, packages, applications, web services/apis. This list is certainly not exhaustive, but except for the most basic scripts that calculate something like a summary statistic, <code>print</code> is rarely used.</p>

<p>Most python &ldquo;systems&rdquo; (or really in any language) are used to deal with data structures that are rarely reduced down to one dimension. For example, <a href="http://projecteuler.net/problem=1">Project Euler, Problem 1</a> challenges you to find the sum of all the multiples of 3 or 5 below 1000. Python accomplishes this in 1 step:</p>

<pre><code>print sum([x for x in range(1000) if x % 3 == 0 or x % 5 == 0])
</code></pre>

<p>In this case, we are looking for the <em>answer</em> to the problem. However, most &ldquo;systems&rdquo; aren&rsquo;t designed to answer a problem, but to <em>solve</em> it. A python module typically defines certain models and methods for manipulating those methods. A web application models objects like users and is able to pass objects specific to that user to the browser. A web scrapper loads external webpages, allowing you to collect relevant data from the page. You are unlikely to use <code>print</code> to handle that data. More likely you will store it to a database or a flat file.</p>

<h2>when <code>print</code> can be deceiving</h2>

<p>You will never stop using <code>print</code>, it just will stop to be the intention of your programs. However, when ever working with a new module or framework, often times you are back to Hello World. By now you are able to read the docs and write a small program without any issue. But as you start to explore the more subtle features, often the docs will simply imply the correct implementation.</p>

<p><code>print</code> will again be your best friend when you mess something up and you&rsquo;re trying to figure out where you went wrong. However, <code>print</code> can often hide important things when you are debugging. For example, in an interactive python session:</p>

<pre><code>&gt;&gt;&gt; print 2
2
&gt;&gt;&gt; print '2'
2
</code></pre>

<p><code>print</code> isn&rsquo;t going let you know if the object you are printing here is a <code>int</code> or a <code>str</code>. Even more insidious, it could be a custom class with an attribute <code>val = 2</code> with it&rsquo;s <code>__repr__</code> method defined as <code>print self.val</code>. This is roughly the problem I recently ran into.</p>

<p>I was working with the <a href="https://github.com/bear/python-twitter">python-twitter</a> module and trying to deal with different twitter errors differently. The pseudo-code to figure out the errors:</p>

<pre><code>try:
  x = twitter_api.call()
except TwitterError as error:
  print error
</code></pre>

<p>The result I got here in one case was <code>[{'message':'error code 1'}]</code> and in the other <code>error code 2</code>. Now this is kind of a pain in the ass, and really the result of python-twitter handling different errors with different methods (probably an issue worth fixing), but it&rsquo;s solvable with</p>

<pre><code>try:
  x = twitter_api.call()
except:
  if type(error) == list and error[0]['message'] == 'error code 1':
    #do whatever you need for error message 1
  elif error == 'error code 2':
    #do whatever you need for error message 2
  else:
    raise #Errors should never pass silently.
</code></pre>

<p>The problem here is that error is not a <code>str</code> but a instance of the <code>TwitterError</code> class, which has an attribute <code>message</code> that is printed when <code>print</code> is called on the object. This is expect behavior, and quite obviously implied by <code>TwitterError as error</code>. But easy enough to miss. A find and replace of <code>error</code> to <code>error.message</code> on the above code fixes it.</p>

<p>One really handy way to help with these types of situations is running <code>python -i your_script.py</code>. This will open up an interactive session after the script exits upon an error or on completion. In this case, I was able observe the <code>error</code> variable after the <code>TwitterError</code> was raised when I thought that it would be captured. So remember, <code>print</code> doesn&rsquo;t always give you the full picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Facebook Javascript SDK and jQuery to Create User Accounts with a Flask App]]></title>
    <link href="http://skien.cc/blog/2013/01/15/using-the-facebook-javascript-sdk-and-jquery-to-create-user-accounts-with-a-flask-app/"/>
    <updated>2013-01-15T11:51:00-05:00</updated>
    <id>http://skien.cc/blog/2013/01/15/using-the-facebook-javascript-sdk-and-jquery-to-create-user-accounts-with-a-flask-app</id>
    <content type="html"><![CDATA[<p>Before we get started, the full code is available on <a href="https://github.com/eriktaubeneck/flask_facebook_login">GitHub</a>.</p>

<h2>Getting Started with <a href="https://developers.facebook.com/">developers.facebook.com</a></h2>

<p>To work with any of the Facebook APIs, you need to be a Facebook developer. Just go to <a href="https://developers.facebook.com/">developers.facebook.com</a> and sign up with your Facebook account. Once you&rsquo;re signed in, click on Apps and create a new app. In order to actually communicate with the app, you will need to register the app with a domain name where the app will live. One option for this is to use (heroku)[<a href="http://www.heroku.com/">http://www.heroku.com/</a>], although I used AWS on a subdomain of my existing domain. The repo in it&rsquo;s current state isn&rsquo;t set up for heroku, and may require a few changes to run there.</p>

<h2>Using the Facebook JavaScript SDK</h2>

<p>I should first point out that Facebook has <a href="https://developers.facebook.com/docs/howtos/login/getting-started/">fantastic documentation</a> for using this SDK. This section is mostly the same as the their content, with a few Flask specific things.</p>

<!-- more -->


<p>We start by inserting the JavaScript SDK initialization snippet after the opening of the <code>&lt;body&gt;</code> tag in <code>layout.html</code> and <code>index.html</code>. I put</p>

<pre><code>&lt;div id="fb-root"&gt;&lt;/div&gt;
</code></pre>

<p>in <code>layout.html</code> and then</p>

<pre><code>&lt;script&gt;
  // Additional JS functions here
  window.fbAsyncInit = function() {
    FB.init({
      appId      : 'YOUR_APP_ID', // App ID
      channelUrl : '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
      status     : true, // check login status
      cookie     : true, // enable cookies to allow the server to access the session
      xfbml      : true  // parse XFBML
    });
    // Additional init code here
  };
  // Load the SDK Asynchronously
  (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = "//connect.facebook.net/en_US/all.js";
     ref.parentNode.insertBefore(js, ref);
   }(document));
&lt;/script&gt;
</code></pre>

<p>in a block called <code>facebook_js</code> in <code>index.html</code>, which extends <code>layout.hmtl</code>. I imagine some of the logic that we are going to build out will vary from page to page, hence making it specific to the <code>index.html</code> page, rather than in ever page that extends <code>layout.html</code>.</p>

<p>You will need to make two changes specific to your app: the <code>appId</code> and <code>channelUrl</code>. I hard coded the <code>channelUrl</code> to an absolute url, <code>http://my.app.com/channel</code> (but there are probably better ways to do this). I also added a route in the flask app. In <code>__init__.py</code>, add</p>

<pre><code>@app.route('/channel')
def channel():
  return render_template('channel.html')
</code></pre>

<p>and in <code>templates/</code> add a file called <code>channel.html</code> with just</p>

<pre><code>&lt;script src="http://skien.cc//connect.facebook.net/en_US/all.js"&gt;&lt;/script&gt;
</code></pre>

<p>in it.  Now we are set up to interface with Facebook. We now will need to check if the user is logged into Facebook and has authorized our app. In the above code block <code>facebook_js</code>, add the following within the <code>window.fbAsyncInit</code> function declaration (where we have <code>// Additional init code here</code>):</p>

<pre><code>FB.getLoginStatus(function(response) {
  if (response.status === 'connected') {
    // connected
  } else if (response.status === 'not_authorized') {
    // not_authorized
  } else {
    // not_logged_in
  }
 });
</code></pre>

<p>Right now, this code doesn&rsquo;t actually do anything, but we can now define different actions depending upon three cases: users is logged in to Facebook and has authorized your app, user is logged in to Facebook but not authorized your app, or user is not logged in to Facebook (and hence authorization is unknown).</p>

<h2>Six Cases</h2>

<p>At this point we will introduce the concept of the app user as well. The idea here is that we will want to store the <code>facebook_id</code> server side so that we can poll their account info with another part of the application (or another process altogether). After we create or get the user, we will store the user object in the <code>session</code> variable. Now, when a user comes to our site, this will double the number of possible cases to 6:</p>

<ol>
<li>App user is logged in AND user is logged into Facebook and has authorized your app</li>
<li>App user is logged in AND user is logged into Facebook but not authorized your app</li>
<li>App user is logged in AND user is not logged into Facebook (and hence authorization is unknown)</li>
<li>App user is not logged in AND user is logged into Facebook and has authorized your app</li>
<li>App user is not logged in AND user is logged into Facebook but not authorized your app</li>
<li>App user is not logged in AND user is not logged into Facebook (and hence authorization is unknown)</li>
</ol>


<p>To handle these cases, we will render the JavaScript in the template differently depending upon if the user object exists:</p>

<pre><code>FB.getLoginStatus(function(response) {
  if (response.status === 'connected') {
    // user not logged in but connected to facebook. case 4.
    console.log('user not logged in but connected to facebook')
  } else if (response.status === 'not_authorized') {
    // user not logged in but app not_authorized on facebook. case 5. 
    console.log('user not logged in but app not_authorized on facebook')
  } else {
    // user not logged in and not_logged_in to facebook. case 6.
    console.log('user not logged in and not_logged_in to facebook')
  }
});      
</code></pre>

<p>Again, this code doesn&rsquo;t actually do anything, but just sets us up to define what happens in each of these cases. To handle most of these cases, I used modals, provided by <a href="http://foundation.zurb.com/docs/reveal.php">Foundation 3</a>. Foundation is much like Twitter Bootstrap, but I found it to be more awesome. (I just came upon it, you&rsquo;ll note that my <a href="http://skien.cc/fractal_game/random">Fractal Stock Game</a> was built with Twitter Bootstrap).</p>

<p>So now let&rsquo;s go through these case by case. In our first case, if the user is logged in on our site, as well as Facebook and authorized our app, we really don&rsquo;t need to do anything. This is what we want. So we don&rsquo;t need to do anything here. The next two cases assume that the user already exists on the app side, and has either removed the access to the Facebook app, or is not currently logged into Facebook. The fourth case assumes the user has authorized our app, is currently logged into Facebook, but not our app. We will come back to these cases.</p>

<p>Let&rsquo;s skip to the case where the user is a new user and has yet to authorize our app. We will either get case 5 or 6, depending upon if the user is currently signed into Facebook. Either way, we will want to prompt the user to login to Facebook (if needed) and authorize our app. This is done by calling the following function from the Facebook JavaScript SDK:</p>

<pre><code>FB.login(function(response) {
    if (response.authResponse) {
        // connected
        console.log('login successful')
    } else {
        // cancelled
        console.log('login failed ')
    }
});
</code></pre>

<p>Now, this produces a pop-up from Facebook to allow the user to login (if needed) and then authorize the app. Most browsers will block popups like this if they are generated directly upon the page load, so it&rsquo;s better to attach this call to a user action, like clicking a button. So in the body of <code>index.html</code>, I created a modal with the following:</p>

<pre><code>&lt;div id="login_modal" class="reveal-modal"&gt;
  &lt;h2&gt; Welcome to creeper! &lt;/h2&gt;
  &lt;p&gt;
    Creeper requires you to login through your Facebook account.
  &lt;/p&gt;
    &lt;a href="#" id="facebook_login" class="button"&gt; Get started. Login with Facebook. &lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>We want this modal to appear in cases 5 and 6, and we want to attach the <code>FB.login()</code> function to the button in the modal. To accomplish the first, we add following to cases 5 and 6 in the <code>FB.getLoginStatus()</code> functions:</p>

<pre><code>$("#login_modal").reveal();
</code></pre>

<p>It&rsquo;s important to note that the following is called before this chunk of Facebook JavaScript as this action above requires jQuery:</p>

<pre><code>&lt;script src=&gt;&lt;/script&gt;
&lt;script src=&gt;&lt;/script&gt;
&lt;script src=&gt;&lt;/script&gt;
</code></pre>

<p>Now, we can attach the <code>FB.login()</code> function to the button in the modal using jQuery as well:</p>

<pre><code>$(function(){
  $('a#facebook_login').bind('click', function () {
      FB.login(function(response) {
          if (response.authResponse) {
              // connected
              console.log('login successful')
          } else {
              // cancelled
              console.log('login failed ')
          }
      });
      return false;
    });
  });
</code></pre>

<p>To deal with cases 2 and 3, we include the following 2 modals:</p>

<pre><code>&lt;div id="user_no_facebook_auth_modal" class="reveal-modal"&gt;
  &lt;h2&gt; Whoops! &lt;/h2&gt;
  &lt;p&gt;
    It seems that creeper isn't authorized on your Facebook account anymore.
  &lt;/p&gt;
    &lt;a href="#" id="facebook_login" class="button"&gt; Reconnect to Facebook. &lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;  

&lt;div id="user_no_facebook_login_modal" class="reveal-modal"&gt;
  &lt;h2&gt; Whoops! &lt;/h2&gt;
  &lt;p&gt;
    It seems that you aren't logged into Facebook currently. Creeper works closely with 
    your Facebook account.
  &lt;/p&gt;
    &lt;a href="#" id="facebook_login" class="button"&gt; Login to Facebook. &lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>and attach to case 2 with:</p>

<pre><code>$("#user_no_facebook_auth_modal").reveal();
</code></pre>

<p>and attach to case 3 with:</p>

<pre><code>$("#user_no_facebook_login_modal").reveal();
</code></pre>

<p>Since the <code>&lt;a&gt;</code> tags all have <code>id="facebook_login"</code>, so the <code>FB.login</code> function is attached to these buttons as well automatically.</p>

<p>The final case, case 4, is fairly simple. The user is logged into Facebook and authorized our app, so we just need to get that user object.</p>

<h2>Creating and Getting the App User Object</h2>

<p>So far we&rsquo;ve only considered if the user object exists, but we haven&rsquo;t talked about creating and fetching it from the Flask app. Luckily we can pass data from the JavaScript response to the Flask app using jQuery. To do this, we make a JavaScript function <code>get_user()</code>:</p>

<pre><code>function get_user() {
    FB.api('/me', function(response) {
      $.getJSON($SCRIPT_ROOT + '/_get_facebook_login', 
                { facebook_id: response.id, name: response.name },
                function(data) {
                  console.log(data);
                  location.reload(true);
                });
    });
}
</code></pre>

<p>In a basic set up, <code>$SCRITP_ROOT</code> will be an empty string, however the <a href="http://flask.pocoo.org/docs/patterns/jquery/">Flask docs</a> recommends using it and setting it to:</p>

<pre><code>&lt;script type=text/javascript&gt;
  $SCRIPT_ROOT = ;
&lt;/script&gt;
</code></pre>

<p>This must be set before it&rsquo;s reference, obviously.</p>

<p>The <code>$.getJSON()</code> function takes a url, an object, <em>data</em>, and a function, <em>func</em>. The function makes a GET request to the url with the contents of the data object as query parameters. Once it gets a response, it calls <em>func</em> with the response value as an argument.</p>

<p>Now, on the Flask app, we render <code>index.html</code> at <code>/</code> with:</p>

<pre><code>@app.route('/')
def landing():
  return render_template('index.html', user=session.get('user', None))
</code></pre>

<p>This is going to pass a <code>user=None</code> until the user is set. So let&rsquo;s create the user.  First, let&rsquo;s define the <code>Users</code> class:</p>

<pre><code>class Users(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  facebook_id = db.Column(db.Integer)
  name = db.Column(db.String(50))

  def __init__(self,facebook_id, name):
    self.facebook_id = facebook_id
    self.name = name
</code></pre>

<p>I put this in a separate <code>models.py</code>, but it can also go in <code>__init__.py</code> after the app is defined. Now, at <code>/_get_facebook_login</code> we attach:</p>

<pre><code>@app.route('/_get_facebook_login')
def get_facebook_login():
  facebook_id = request.args.get('facebook_id', False, type=int)
  name = request.args.get('name', '', type=str)
  if facebook_id:
    user = Users.query.filter_by(facebook_id=facebook_id).first()
    if not user:
      user = Users(facebook_id,name)
      db.session.add(user)
      db.session.commit()
    session['user'] = user
  return jsonify(result=1)
</code></pre>

<p>This function looks for <code>facebook_id</code> and <code>name</code> from the request sent by <code>$.getJSON()</code> function. If we don&rsquo;t get the <code>facebook_id</code> then it skips getting the user and just returns <code>{"result":"1"}</code>. If we do, we first try to get a user from our database with that <code>facebook_id</code>, and if there is none, we create the user and commit it to the database. Either way, we add the user to the session. We could return a different value showing we now have the user, but we don&rsquo;t do anything with that data in the JavaScript. Now that the session has a user object, by returning a result, <em>func</em> in <code>$.getJSON()</code> gets called. This triggers <code>location.reload(true);</code>, which reloads the page.</p>

<p>The final thing we need to do is drop in <code>get_user()</code> in a few places. In the end, the <code>FB.login()</code> call will look like:</p>

<pre><code>$(function(){
  $('a#facebook_login').bind('click', function () {
    FB.login(function(response) {
      if (response.authResponse) {
        // connected
        console.log('login successful')
        get_user()
      } else {
        // cancelled
        console.log('login failed ')
      }
    });
return false;
  });
});
</code></pre>

<p>and our <code>FB.getLoginStatus()</code> call will look like:</p>

<pre><code>  FB.getLoginStatus(function(response) {
    if (response.status === 'connected') {
      // connected
      console.log('connected')
      $("#no_user_facebook_modal").reveal()
      get_user()
    } else if (response.status === 'not_authorized') {
      // not_authorized
      console.log('not authorized')
      $("#login_modal").reveal();
    } else {
      // not_logged_in
      console.log('not logged in')
      $("#login_modal").reveal();
    }
   });      
</code></pre>

<p>And that&rsquo;s about it. The full code is available on <a href="https://github.com/eriktaubeneck/flask_facebook_login">GitHub</a>, so fork me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Flask with nginx and uWSGI]]></title>
    <link href="http://skien.cc/blog/2013/01/07/using-flask-with-nginx-and-uwsgi/"/>
    <updated>2013-01-07T11:49:00-05:00</updated>
    <id>http://skien.cc/blog/2013/01/07/using-flask-with-nginx-and-uwsgi</id>
    <content type="html"><![CDATA[<h2>Starting with AWS</h2>

<p>I&rsquo;m using <a href="http://aws.amazon.com">Amazon Web Services</a> for hosting my application. It has all sorts of fantastic capabilities, but for small stuff all I&rsquo;m really using it for is to run a Ubuntu 12.04 Server. (AMI: ubuntu/images/ebs/ubuntu-precise-12.04-amd64-server-20121001 (ami-3d4ff254)). This is on the free tier, so if you&rsquo;re a new account, you can run one of these for free for a year. If not, running it full time will cost you about $15/month. Attach that thing to a elastic IP (they&rsquo;re free as long as you&rsquo;re using it) and connect with SSH.</p>

<pre><code>ssh -i key.pem ubuntu@aws-ip-address
</code></pre>

<p>One of the first things I do is add my public key to <code>~/.ssh/authorized_keys</code> on the server so that I can connect without the <code>-i key.pem</code>.</p>

<!-- more -->


<h2>Installing nginx (engine-x)</h2>

<p>First, add the correct repo so that you can install the correct version. Create a file <code>/etc/apt/sources.list.d/nginx-lucid.list</code> and add the following:</p>

<pre><code>deb http://nginx.org/packages/ubuntu/ lucid nginx
deb-src http://nginx.org/packages/ubuntu/ lucid nginx
</code></pre>

<p>We will also add the gpg key to to the apt keyring. From your home directory, run:</p>

<pre><code>wget http://nginx.org/keys/nginx_signing.key
sudo apt-key add nginx_signing.key
rm nginx_signing.key
</code></pre>

<p>Now we can install nginx with:</p>

<pre><code>sudo apt-get update
sudo apt-get install nginx
</code></pre>

<h2>Installing uWSGI</h2>

<p>First, we need to install pip, then we can use pip to install uISGI.</p>

<pre><code>sudo apt-get install python-dev build-essential python-pip
sudo pip install uwsgi
</code></pre>

<p>We are going to want to un uWSGI in the background, so we will create a uwsgi user:</p>

<pre><code>sudo useradd -c 'uwsgi user,,,' -g nginx -d /nonexistent -s /bin/false uwsgi
</code></pre>

<p>Now, create the file <code>/etc/init/uwsgi.conf</code> and put the following in it:</p>

<pre><code>description "uWSGI"
start on runlevel [2345]
stop on runlevel [06]

respawn

exec uwsgi --master --processes 4 --die-on-term --uid uwsgi --gid nginx --socket /tmp/uwsgi.sock --chmod-socket 660 --no-site --vhost --logto /var/log/uwsgi.log
</code></pre>

<h2>Flask Configuration</h2>

<p>We need to set up a Python virtual environment so that we can point uWSGI to the correct python interpreter. If you plan on ever using MySQL with Flask, then you&rsquo;ll need to use the <code>--system-site-packages</code> option for your virtual environment. For some reason, I was unable to install python-mysqldb so that the virtual environment could use it without this option.</p>

<pre><code>sudo pip install virtualenv
sudo virtualenv --system-site-packages /srv/webapps/helloworld/env
source /srv/webapps/helloworld/env/bin/activate
</code></pre>

<p>You are now using the virtual environment. To install Flask, simply run:</p>

<pre><code>sudo pip install flask
</code></pre>

<p>Now, we can deactivate the virtual environment with:</p>

<pre><code>deactivate
</code></pre>

<p>For right now, I&rsquo;m just going to set up the hello world Flask app. Going to <code>aws-ip-address</code> should simply produce &ldquo;Hello, world!&rdquo;. We are going to store this in <code>/srv/webapps/helloworld</code>. It can really go wherever you want, so adjust accordingly if you want to put it somewhere else.</p>

<pre><code>sudo mkdir -p /etc/webapps/helloworld
</code></pre>

<p>Now, inside of this directory, we are going to put our Flask app. It seems odd, but we are going to create another folder called <code>helloworld</code>. Then inside of that, we are going put the webapp inside of that dir in the file <code>__init__.py</code>. We will also create the <code>static</code> folder for static files like images and css stylesheets.</p>

<pre><code>cd /etc/webapps/helloworld
sudo mkdir helloworld
sudo mkdir helloworld/static
sudo touch helloworld/__init__.py
</code></pre>

<p>Open this file and include:</p>

<pre><code>from flask import Flask
app = Flask(__name__)

@app.route('/')
def landing():
  return 'Hello, world!'
</code></pre>

<p>This allows us to import <code>helloworld</code> as a module. In <code>/etc/webapps/helloworld</code> create a file called <code>runserver.py</code>. In this we put:</p>

<pre><code>from helloworld import app

if __name__ == '__main__':
  app.run(host='0.0.0.0', port=80)
</code></pre>

<p>The <code>if __name__ == '__main__'</code> is extremely important, because we only want this part to run if we run the script ourselves (rather than through a uWSGI process.). By manually setting the host and port like this, we should be able to run this and be able to access it through the built in development server. From <code>/srv/webapps/helloworld</code> run:</p>

<pre><code>source /env/bin/activate
sudo python runserver.py
</code></pre>

<p>Now, by going to <code>aws-ip-address</code> in your browser, you should see &ldquo;Hello, world!&rdquo;.  If you get an error that the address is already in use, nginx is probably already running and you can kill it with <code>sudo killall nginx</code>. If the page seems to hang and never loads, check your AWS security groups to make sure you have port 80 (HTTP) open. When you&rsquo;re done, deactivate the virtual environment:</p>

<pre><code>deactivate
</code></pre>

<p>Congrats! You have a Flask app running. Now, let&rsquo;s getting running with nginx and uWSGI so it can handle a bit more traffic.</p>

<h2>Setting up nginx and uWSGI</h2>

<p>First, let&rsquo;s add some permissions for our uwsgi user.</p>

<pre><code>sudo usermod -a -G nginx uwsgi
</code></pre>

<p>adds the user <code>uwsgi</code> to the group <code>nginx</code>.</p>

<pre><code>sudo chown -R uwsgi:nginx /srv/webapps/helloworld
</code></pre>

<p>changes the owner of the directory to <code>uwsgi:nginx</code>.</p>

<pre><code>sudo chmod -R g+w /srv/webapps/helloworld
</code></pre>

<p>give the group owner write capabilities to so that uWSGI can write the compiled python files.</p>

<p>nginx uses <code>.conf</code> files to set it&rsquo;s configuration options. We first remove the default configuration file:</p>

<pre><code>sudo rm /etc/nginx/conf.d/default.conf
</code></pre>

<p>If you don&rsquo;t have this file, you may be running a different version on nginx. Now create <code>/etc/nginx/conf.d/helloworld.conf</code> and include the following:</p>

<pre><code>server {
    listen       80;
    server_name  localhost;

    location /static {
        alias /srv/webapps/helloworld/helloworld/static;
    }

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/tmp/uwsgi.sock;
        uwsgi_param UWSGI_CHDIR /srv/webapps/helloworld;
        uwsgi_param UWSGI_PYHOME /srv/webapps/helloworld/env;
        uwsgi_param UWSGI_MODULE helloworld;
        uwsgi_param UWSGI_CALLABLE app;
    }
}
</code></pre>

<p>And there you go! Flask with a real deployment option. That said, I should say that I am not a deployment expert, and much of this here is exactly from a <a href="http://blog.kramerapps.com/post/22551999777/flask-uwsgi-nginx-ubuntu">blog by Conrad Kramer</a> with a few changes. Any suggestions on how to make this process easier or better, links to other tutorials, or anything of the like, please let me know at erik(dot)taubeneck(at)gmail.com.</p>
]]></content>
  </entry>
  
</feed>
